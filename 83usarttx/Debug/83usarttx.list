
83usarttx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004940  08004940  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004940  08004940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3f5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c91  00000000  00000000  0002b495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020964  00000000  00000000  0002e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0cb  00000000  00000000  0004ea14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1756  00000000  00000000  0005badf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d235  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002758  00000000  00000000  0011d288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004850 	.word	0x08004850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004850 	.word	0x08004850

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800028e:	2201      	movs	r2, #1
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <__io_putchar+0x20>)
 8000292:	f002 fb59 	bl	8002948 <HAL_UART_Transmit>
	return ch;
 8000296:	687b      	ldr	r3, [r7, #4]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000008c 	.word	0x2000008c

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fabb 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f871 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f8fd 	bl	80004b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002b6:	f000 f8cb 	bl	8000450 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t tickstart = HAL_GetTick();
 80002ba:	f000 fb0d 	bl	80008d8 <HAL_GetTick>
 80002be:	6078      	str	r0, [r7, #4]
  //printf("%ld\n",tickstart);
  uint32_t wait = 1000;
 80002c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c4:	603b      	str	r3, [r7, #0]

	  /***********方法2*******************/
	  if(i == 256){
		  i = 0;
	  }
	  buffer2[i] = k;
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <main+0xd8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <main+0xdc>)
 80002ce:	8819      	ldrh	r1, [r3, #0]
 80002d0:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <main+0xe0>)
 80002d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  buffer2[i + 1] = k + 1;
 80002d6:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <main+0xdc>)
 80002d8:	881a      	ldrh	r2, [r3, #0]
 80002da:	4b28      	ldr	r3, [pc, #160]	; (800037c <main+0xd8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	3201      	adds	r2, #1
 80002e2:	b291      	uxth	r1, r2
 80002e4:	4a27      	ldr	r2, [pc, #156]	; (8000384 <main+0xe0>)
 80002e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  k += 2;
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <main+0xdc>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	3302      	adds	r3, #2
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <main+0xdc>)
 80002f4:	801a      	strh	r2, [r3, #0]
	  i += 2;
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <main+0xd8>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	3302      	adds	r3, #2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <main+0xd8>)
 8000300:	701a      	strb	r2, [r3, #0]
	  if(j == 256){
	  		 j = 0;
	  	  }
	  tep[0] = buffer2[j];
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <main+0xe4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <main+0xe0>)
 800030a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800030e:	4b1f      	ldr	r3, [pc, #124]	; (800038c <main+0xe8>)
 8000310:	801a      	strh	r2, [r3, #0]
	  tep[1] = buffer2[j + 1];
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <main+0xe4>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <main+0xe0>)
 800031a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <main+0xe8>)
 8000320:	805a      	strh	r2, [r3, #2]
	  //printf("%d %d\n",buffer2[j],i-j);

	  printf("%d %d\n",buffer2[j],buffer2[j + 1]);
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <main+0xe4>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <main+0xe0>)
 800032a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800032e:	4619      	mov	r1, r3
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0xe4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <main+0xe0>)
 8000338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033c:	461a      	mov	r2, r3
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <main+0xec>)
 8000340:	f003 faf8 	bl	8003934 <iprintf>
	  j += 2;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <main+0xe4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	3302      	adds	r3, #2
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <main+0xe4>)
 800034e:	701a      	strb	r2, [r3, #0]
	  //printf("num \n");
	  //HAL_UART_Transmit_IT(&huart1, &buffer2[j], 1);//把buffer2的内容�?�过uart2发�?�出去，长度�??10
	  //tep = buffer2[j];
	  //while(HAL_UART_Transmit_IT(&huart1, (uint8_t *)tep, 2) != HAL_OK);

	  if((HAL_GetTick() - tickstart) >= wait){
 8000350:	f000 fac2 	bl	80008d8 <HAL_GetTick>
 8000354:	4602      	mov	r2, r0
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d803      	bhi.n	8000368 <main+0xc4>
		  tickstart = HAL_GetTick();
 8000360:	f000 faba 	bl	80008d8 <HAL_GetTick>
 8000364:	6078      	str	r0, [r7, #4]
		  break;
 8000366:	e003      	b.n	8000370 <main+0xcc>
	  }
	  HAL_Delay(1);
 8000368:	2001      	movs	r0, #1
 800036a:	f000 fac1 	bl	80008f0 <HAL_Delay>
	  if(i == 256){
 800036e:	e7aa      	b.n	80002c6 <main+0x22>
 8000370:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000310 	.word	0x20000310
 8000380:	20000312 	.word	0x20000312
 8000384:	20000110 	.word	0x20000110
 8000388:	20000311 	.word	0x20000311
 800038c:	20000314 	.word	0x20000314
 8000390:	08004868 	.word	0x08004868

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b0a6      	sub	sp, #152	; 0x98
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f003 fabe 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2258      	movs	r2, #88	; 0x58
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fab0 	bl	8003924 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003e0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fdb2 	bl	8000f5c <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f887 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2302      	movs	r3, #2
 8000408:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000412:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fdf0 	bl	8002004 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800042a:	f000 f871 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800042e:	2301      	movs	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4618      	mov	r0, r3
 800043a:	f002 f819 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000444:	f000 f864 	bl	8000510 <Error_Handler>
  }
}
 8000448:	bf00      	nop
 800044a:	3798      	adds	r7, #152	; 0x98
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART1_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800045c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_USART1_UART_Init+0x58>)
 8000494:	f002 fa0a 	bl	80028ac <HAL_UART_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f837 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40013800 	.word	0x40013800

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_GPIO_Init+0x5c>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <MX_GPIO_Init+0x5c>)
 80004bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_GPIO_Init+0x5c>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0x5c>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <MX_GPIO_Init+0x5c>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_GPIO_Init+0x5c>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_GPIO_Init+0x5c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <MX_GPIO_Init+0x5c>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_GPIO_Init+0x5c>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_MspInit+0x44>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <HAL_UART_MspInit+0x8c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d12f      	bne.n	80005e6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_UART_MspInit+0x90>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <HAL_UART_MspInit+0x90>)
 800058c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_UART_MspInit+0x90>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_UART_MspInit+0x90>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <HAL_UART_MspInit+0x90>)
 80005a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_UART_MspInit+0x90>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005b6:	2330      	movs	r3, #48	; 0x30
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005c6:	2307      	movs	r3, #7
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_UART_MspInit+0x94>)
 80005d2:	f000 fb39 	bl	8000c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2025      	movs	r0, #37	; 0x25
 80005dc:	f000 fa87 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005e0:	2025      	movs	r0, #37	; 0x25
 80005e2:	f000 faa0 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40013800 	.word	0x40013800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000800 	.word	0x48000800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000648:	f000 f932 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <USART1_IRQHandler+0x10>)
 8000656:	f002 fa0b 	bl	8002a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000008c 	.word	0x2000008c

08000664 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	e00a      	b.n	800068c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000676:	f3af 8000 	nop.w
 800067a:	4601      	mov	r1, r0
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	b2ca      	uxtb	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf0      	blt.n	8000676 <_read+0x12>
	}

return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e009      	b.n	80006c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	60ba      	str	r2, [r7, #8]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fde1 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbf1      	blt.n	80006b0 <_write+0x12>
	}
	return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_close>:

int _close(int file)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_isatty>:

int _isatty(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
	return 1;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f003 f8ae 	bl	80038d0 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20010000 	.word	0x20010000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	20000318 	.word	0x20000318
 80007a8:	20000330 	.word	0x20000330

080007ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fa:	f7ff ffd7 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f003 f86d 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fd4f 	bl	80002a4 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000814:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8000818:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800081c:	20000330 	.word	0x20000330

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f94f 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fe6c 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f967 	bl	8000b42 <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f92f 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008
 80008d4:	2000031c 	.word	0x2000031c

080008d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;  
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000031c 	.word	0x2000031c

080008f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffde 	bl	80008d8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <__NVIC_EnableIRQ+0x38>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff29 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff3e 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff8e 	bl	8000a2c <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff31 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d008      	beq.n	8000b7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e020      	b.n	8000bc0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 020e 	bic.w	r2, r2, #14
 8000b8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0201 	bic.w	r2, r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d005      	beq.n	8000bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2204      	movs	r2, #4
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e027      	b.n	8000c3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 020e 	bic.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
    } 
  }
  return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e160      	b.n	8000f1a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8152 	beq.w	8000f14 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x40>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d017      	beq.n	8000d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d123      	bne.n	8000d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	6939      	ldr	r1, [r7, #16]
 8000d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0203 	and.w	r2, r3, #3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80ac 	beq.w	8000f14 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	4b5e      	ldr	r3, [pc, #376]	; (8000f38 <HAL_GPIO_Init+0x2f0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a5d      	ldr	r2, [pc, #372]	; (8000f38 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x2f0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd4:	4a59      	ldr	r2, [pc, #356]	; (8000f3c <HAL_GPIO_Init+0x2f4>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfe:	d025      	beq.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <HAL_GPIO_Init+0x2f8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d01f      	beq.n	8000e48 <HAL_GPIO_Init+0x200>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a4e      	ldr	r2, [pc, #312]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d019      	beq.n	8000e44 <HAL_GPIO_Init+0x1fc>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a4d      	ldr	r2, [pc, #308]	; (8000f48 <HAL_GPIO_Init+0x300>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d013      	beq.n	8000e40 <HAL_GPIO_Init+0x1f8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d00d      	beq.n	8000e3c <HAL_GPIO_Init+0x1f4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <HAL_GPIO_Init+0x308>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0x1f0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4a      	ldr	r2, [pc, #296]	; (8000f54 <HAL_GPIO_Init+0x30c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d101      	bne.n	8000e34 <HAL_GPIO_Init+0x1ec>
 8000e30:	2306      	movs	r3, #6
 8000e32:	e00c      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e34:	2307      	movs	r3, #7
 8000e36:	e00a      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e008      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e006      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e40:	2303      	movs	r3, #3
 8000e42:	e004      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <HAL_GPIO_Init+0x206>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	f002 0203 	and.w	r2, r2, #3
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4093      	lsls	r3, r2
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e5e:	4937      	ldr	r1, [pc, #220]	; (8000f3c <HAL_GPIO_Init+0x2f4>)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eba:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa22 f303 	lsr.w	r3, r2, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f47f ae97 	bne.w	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48000800 	.word	0x48000800
 8000f48:	48000c00 	.word	0x48000c00
 8000f4c:	48001000 	.word	0x48001000
 8000f50:	48001400 	.word	0x48001400
 8000f54:	48001800 	.word	0x48001800
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f001 b83a 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 816f 	beq.w	8001276 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f98:	4bb5      	ldr	r3, [pc, #724]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa4:	4bb2      	ldr	r3, [pc, #712]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d15c      	bne.n	800106a <HAL_RCC_OscConfig+0x10e>
 8000fb0:	4baf      	ldr	r3, [pc, #700]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d155      	bne.n	800106a <HAL_RCC_OscConfig+0x10e>
 8000fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	095b      	lsrs	r3, r3, #5
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x94>
 8000fea:	4ba1      	ldr	r3, [pc, #644]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e015      	b.n	800101c <HAL_RCC_OscConfig+0xc0>
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001008:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800100c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001018:	4b95      	ldr	r3, [pc, #596]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001020:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001024:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001028:	fa92 f2a2 	rbit	r2, r2
 800102c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001030:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	f042 0220 	orr.w	r2, r2, #32
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f002 021f 	and.w	r2, r2, #31
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 8111 	beq.w	8001274 <HAL_RCC_OscConfig+0x318>
 8001052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001056:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 8108 	bne.w	8001274 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 bfc6 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800106e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x12e>
 800107c:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e036      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 800108a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800108e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x158>
 800109a:	4b75      	ldr	r3, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a74      	ldr	r2, [pc, #464]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a71      	ldr	r2, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e021      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 80010b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x184>
 80010c6:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a66      	ldr	r2, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 80010e0:	4b63      	ldr	r3, [pc, #396]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a62      	ldr	r2, [pc, #392]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b60      	ldr	r3, [pc, #384]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a5f      	ldr	r2, [pc, #380]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d059      	beq.n	80011bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fbe6 	bl	80008d8 <HAL_GetTick>
 800110c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff fbe1 	bl	80008d8 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d902      	bls.n	8001128 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	f000 bf67 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800113c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <HAL_RCC_OscConfig+0x1fe>
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	e015      	b.n	8001186 <HAL_RCC_OscConfig+0x22a>
 800115a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800116e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001172:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001176:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800118a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800118e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001192:	fa92 f2a2 	rbit	r2, r2
 8001196:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800119a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	f042 0220 	orr.w	r2, r2, #32
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f002 021f 	and.w	r2, r2, #31
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0ab      	beq.n	8001112 <HAL_RCC_OscConfig+0x1b6>
 80011ba:	e05c      	b.n	8001276 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fb8c 	bl	80008d8 <HAL_GetTick>
 80011c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff fb87 	bl	80008d8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d902      	bls.n	80011dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f000 bf0d 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x2b2>
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x2de>
 800120e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001212:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800122a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_RCC_OscConfig+0x314>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001242:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001246:	fa92 f2a2 	rbit	r2, r2
 800124a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800124e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f002 021f 	and.w	r2, r2, #31
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ab      	bne.n	80011c6 <HAL_RCC_OscConfig+0x26a>
 800126e:	e002      	b.n	8001276 <HAL_RCC_OscConfig+0x31a>
 8001270:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 817f 	beq.w	800158a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800128c:	4ba7      	ldr	r3, [pc, #668]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001298:	4ba4      	ldr	r3, [pc, #656]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d173      	bne.n	800138c <HAL_RCC_OscConfig+0x430>
 80012a4:	4ba1      	ldr	r3, [pc, #644]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b0:	d16c      	bne.n	800138c <HAL_RCC_OscConfig+0x430>
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x386>
 80012dc:	4b93      	ldr	r3, [pc, #588]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	e013      	b.n	800130a <HAL_RCC_OscConfig+0x3ae>
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001306:	4b89      	ldr	r3, [pc, #548]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	2202      	movs	r2, #2
 800130c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001310:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001314:	fa92 f2a2 	rbit	r2, r2
 8001318:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800131c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001320:	fab2 f282 	clz	r2, r2
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	f042 0220 	orr.w	r2, r2, #32
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	f002 021f 	and.w	r2, r2, #31
 8001330:	2101      	movs	r1, #1
 8001332:	fa01 f202 	lsl.w	r2, r1, r2
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00a      	beq.n	8001352 <HAL_RCC_OscConfig+0x3f6>
 800133c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d002      	beq.n	8001352 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f000 be52 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	21f8      	movs	r1, #248	; 0xf8
 8001368:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001370:	fa91 f1a1 	rbit	r1, r1
 8001374:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001378:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800137c:	fab1 f181 	clz	r1, r1
 8001380:	b2c9      	uxtb	r1, r1
 8001382:	408b      	lsls	r3, r1
 8001384:	4969      	ldr	r1, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e0fe      	b.n	800158a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8088 	beq.w	80014ae <HAL_RCC_OscConfig+0x552>
 800139e:	2301      	movs	r3, #1
 80013a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80013b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	2301      	movs	r3, #1
 80013c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fa85 	bl	80008d8 <HAL_GetTick>
 80013ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fa80 	bl	80008d8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d902      	bls.n	80013ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f000 be06 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80013fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d102      	bne.n	800141a <HAL_RCC_OscConfig+0x4be>
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	e013      	b.n	8001442 <HAL_RCC_OscConfig+0x4e6>
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001432:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2202      	movs	r2, #2
 8001444:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001448:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800144c:	fa92 f2a2 	rbit	r2, r2
 8001450:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001454:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001458:	fab2 f282 	clz	r2, r2
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	f042 0220 	orr.w	r2, r2, #32
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	f002 021f 	and.w	r2, r2, #31
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0af      	beq.n	80013d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	21f8      	movs	r1, #248	; 0xf8
 800148a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001492:	fa91 f1a1 	rbit	r1, r1
 8001496:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800149a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800149e:	fab1 f181 	clz	r1, r1
 80014a2:	b2c9      	uxtb	r1, r1
 80014a4:	408b      	lsls	r3, r1
 80014a6:	4921      	ldr	r1, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e06d      	b.n	800158a <HAL_RCC_OscConfig+0x62e>
 80014ae:	2301      	movs	r3, #1
 80014b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80014c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	2300      	movs	r3, #0
 80014d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff f9fd 	bl	80008d8 <HAL_GetTick>
 80014de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff f9f8 	bl	80008d8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d902      	bls.n	80014fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f000 bd7e 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800150c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0x5d4>
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <HAL_RCC_OscConfig+0x5d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	e016      	b.n	8001558 <HAL_RCC_OscConfig+0x5fc>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001548:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001554:	4bbf      	ldr	r3, [pc, #764]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	2202      	movs	r2, #2
 800155a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800155e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001562:	fa92 f2a2 	rbit	r2, r2
 8001566:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800156a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800156e:	fab2 f282 	clz	r2, r2
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f002 021f 	and.w	r2, r2, #31
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ac      	bne.n	80014e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8113 	beq.w	80017c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d07c      	beq.n	80016aa <HAL_RCC_OscConfig+0x74e>
 80015b0:	2301      	movs	r3, #1
 80015b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80015c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <HAL_RCC_OscConfig+0x8fc>)
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	461a      	mov	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff f97d 	bl	80008d8 <HAL_GetTick>
 80015de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f978 	bl	80008d8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d902      	bls.n	80015fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f000 bcfe 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001604:	fa93 f2a3 	rbit	r2, r3
 8001608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	fa93 f2a3 	rbit	r2, r3
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800163e:	2202      	movs	r2, #2
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001654:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001658:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001666:	2102      	movs	r1, #2
 8001668:	6019      	str	r1, [r3, #0]
 800166a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f1a3 	rbit	r1, r3
 8001678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001680:	6019      	str	r1, [r3, #0]
  return result;
 8001682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001686:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d09d      	beq.n	80015e4 <HAL_RCC_OscConfig+0x688>
 80016a8:	e08d      	b.n	80017c6 <HAL_RCC_OscConfig+0x86a>
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016cc:	601a      	str	r2, [r3, #0]
  return result;
 80016ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_RCC_OscConfig+0x8fc>)
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f8f4 	bl	80008d8 <HAL_GetTick>
 80016f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff f8ef 	bl	80008d8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d902      	bls.n	800170c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	f000 bc75 	b.w	8001ff6 <HAL_RCC_OscConfig+0x109a>
 800170c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001710:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001758:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001772:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001776:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 800177a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001784:	2102      	movs	r1, #2
 8001786:	6019      	str	r1, [r3, #0]
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f1a3 	rbit	r1, r3
 8001796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800179e:	6019      	str	r1, [r3, #0]
  return result;
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2101      	movs	r1, #1
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d197      	bne.n	80016f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 81a5 	beq.w	8001b26 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_RCC_OscConfig+0x8f8>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001814:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_RCC_OscConfig+0x900>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d121      	bne.n	800186c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x900>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_RCC_OscConfig+0x900>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001834:	f7ff f850 	bl	80008d8 <HAL_GetTick>
 8001838:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e010      	b.n	8001860 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff f84b 	bl	80008d8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d908      	bls.n	8001860 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e3d1      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	10908120 	.word	0x10908120
 800185c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_RCC_OscConfig+0xb3c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0e8      	beq.n	800183e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x92e>
 800187c:	4b87      	ldr	r3, [pc, #540]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a86      	ldr	r2, [pc, #536]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	e035      	b.n	80018f6 <HAL_RCC_OscConfig+0x99a>
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x958>
 800189a:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a7c      	ldr	r2, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	e020      	b.n	80018f6 <HAL_RCC_OscConfig+0x99a>
 80018b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x982>
 80018c4:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a74      	ldr	r2, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x99a>
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a6b      	ldr	r2, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8081 	beq.w	8001a0a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7fe ffe6 	bl	80008d8 <HAL_GetTick>
 800190c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7fe ffe1 	bl	80008d8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e365      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001956:	2202      	movs	r2, #2
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001970:	601a      	str	r2, [r3, #0]
  return result;
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800197a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d102      	bne.n	8001996 <HAL_RCC_OscConfig+0xa3a>
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	e013      	b.n	80019be <HAL_RCC_OscConfig+0xa62>
 8001996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019c6:	2102      	movs	r1, #2
 80019c8:	6011      	str	r1, [r2, #0]
 80019ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fa92 f1a2 	rbit	r1, r2
 80019d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019dc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019e0:	6011      	str	r1, [r2, #0]
  return result;
 80019e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019e6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d084      	beq.n	8001912 <HAL_RCC_OscConfig+0x9b6>
 8001a08:	e083      	b.n	8001b12 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7fe ff65 	bl	80008d8 <HAL_GetTick>
 8001a0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7fe ff60 	bl	80008d8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e2e4      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xb44>
 8001a92:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <HAL_RCC_OscConfig+0xb40>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	e017      	b.n	8001ac8 <HAL_RCC_OscConfig+0xb6c>
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4bb3      	ldr	r3, [pc, #716]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001acc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	6011      	str	r1, [r2, #0]
 8001ad4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ad8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	fa92 f1a2 	rbit	r1, r2
 8001ae2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ae6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001aea:	6011      	str	r1, [r2, #0]
  return result;
 8001aec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001af0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d180      	bne.n	8001a14 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 825e 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	4b96      	ldr	r3, [pc, #600]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f000 821f 	beq.w	8001f84 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f040 8170 	bne.w	8001e38 <HAL_RCC_OscConfig+0xedc>
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b7c:	601a      	str	r2, [r3, #0]
  return result;
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fe9b 	bl	80008d8 <HAL_GetTick>
 8001ba2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe fe96 	bl	80008d8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e21c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001be0:	601a      	str	r2, [r3, #0]
  return result;
 8001be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001bea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_OscConfig+0xcaa>
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	e027      	b.n	8001c56 <HAL_RCC_OscConfig+0xcfa>
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c62:	6011      	str	r1, [r2, #0]
 8001c64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	fa92 f1a2 	rbit	r1, r2
 8001c72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c76:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c7a:	6011      	str	r1, [r2, #0]
  return result;
 8001c7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c80:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d182      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f023 020f 	bic.w	r2, r3, #15
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a19      	ldr	r1, [r3, #32]
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	492d      	ldr	r1, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fa93 f2a3 	rbit	r2, r3
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d08:	601a      	str	r2, [r3, #0]
  return result;
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	461a      	mov	r2, r3
 8001d26:	2301      	movs	r3, #1
 8001d28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fdd5 	bl	80008d8 <HAL_GetTick>
 8001d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d32:	e009      	b.n	8001d48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe fdd0 	bl	80008d8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e156      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d6c:	601a      	str	r2, [r3, #0]
  return result;
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0xe3c>
 8001d8c:	4b01      	ldr	r3, [pc, #4]	; (8001d94 <HAL_RCC_OscConfig+0xe38>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e02a      	b.n	8001de8 <HAL_RCC_OscConfig+0xe8c>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_RCC_OscConfig+0x10a4>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df4:	6011      	str	r1, [r2, #0]
 8001df6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dfa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	fa92 f1a2 	rbit	r1, r2
 8001e04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e08:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e0c:	6011      	str	r1, [r2, #0]
  return result;
 8001e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e12:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f042 0220 	orr.w	r2, r2, #32
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f002 021f 	and.w	r2, r2, #31
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f43f af7f 	beq.w	8001d34 <HAL_RCC_OscConfig+0xdd8>
 8001e36:	e0dd      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1098>
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e5c:	601a      	str	r2, [r3, #0]
  return result;
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fd2b 	bl	80008d8 <HAL_GetTick>
 8001e82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e009      	b.n	8001e9c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fd26 	bl	80008d8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ac      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ec0:	601a      	str	r2, [r3, #0]
  return result;
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001eca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xf8a>
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x10a4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e027      	b.n	8001f36 <HAL_RCC_OscConfig+0xfda>
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x10a4>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f48:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	fa92 f1a2 	rbit	r1, r2
 8001f52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f56:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f5a:	6011      	str	r1, [r2, #0]
  return result;
 8001f5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f60:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d182      	bne.n	8001e88 <HAL_RCC_OscConfig+0xf2c>
 8001f82:	e037      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e02e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x10a4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x10a4>)
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d117      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fc4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09e      	sub	sp, #120	; 0x78
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e162      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b90      	ldr	r3, [pc, #576]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b8d      	ldr	r3, [pc, #564]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	498b      	ldr	r1, [pc, #556]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e14a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	497f      	ldr	r1, [pc, #508]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80dc 	beq.w	8002230 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d13c      	bne.n	80020fa <HAL_RCC_ClockConfig+0xf6>
 8002080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002084:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800208e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_ClockConfig+0xa6>
 80020a4:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	e00f      	b.n	80020ca <HAL_RCC_ClockConfig+0xc6>
 80020aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	667b      	str	r3, [r7, #100]	; 0x64
 80020b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020bc:	663b      	str	r3, [r7, #96]	; 0x60
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80020d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0220 	orr.w	r2, r2, #32
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d17b      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0f3      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d13c      	bne.n	800217c <HAL_RCC_ClockConfig+0x178>
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_RCC_ClockConfig+0x128>
 8002126:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	e00f      	b.n	800214c <HAL_RCC_ClockConfig+0x148>
 800212c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
 800213a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
 8002140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002150:	63ba      	str	r2, [r7, #56]	; 0x38
 8002152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002154:	fa92 f2a2 	rbit	r2, r2
 8002158:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800215a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d13a      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b2      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
 800217c:	2302      	movs	r3, #2
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x1a0>
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e00d      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1bc>
 80021a4:	2302      	movs	r3, #2
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	2302      	movs	r3, #2
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2202      	movs	r2, #2
 80021c2:	61ba      	str	r2, [r7, #24]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	617a      	str	r2, [r7, #20]
  return result;
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e079      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fb6a 	bl	80008d8 <HAL_GetTick>
 8002204:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe fb66 	bl	80008d8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e061      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_ClockConfig+0x260>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d214      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4906      	ldr	r1, [pc, #24]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_RCC_ClockConfig+0x25c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e040      	b.n	80022e2 <HAL_RCC_ClockConfig+0x2de>
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCC_ClockConfig+0x2e8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	491a      	ldr	r1, [pc, #104]	; (80022ec <HAL_RCC_ClockConfig+0x2e8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_RCC_ClockConfig+0x2e8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4912      	ldr	r1, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x2e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022a6:	f000 f829 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022aa:	4601      	mov	r1, r0
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_RCC_ClockConfig+0x2e8>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	22f0      	movs	r2, #240	; 0xf0
 80022b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	fa92 f2a2 	rbit	r2, r2
 80022be:	60fa      	str	r2, [r7, #12]
  return result;
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	fab2 f282 	clz	r2, r2
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	40d3      	lsrs	r3, r2
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x2ec>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	fa21 f303 	lsr.w	r3, r1, r3
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_RCC_ClockConfig+0x2f0>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_RCC_ClockConfig+0x2f4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fab8 	bl	8000850 <HAL_InitTick>
  
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3778      	adds	r7, #120	; 0x78
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08004870 	.word	0x08004870
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b08b      	sub	sp, #44	; 0x2c
 8002300:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d002      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x30>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d003      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x36>
 800232a:	e03f      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800232e:	623b      	str	r3, [r7, #32]
      break;
 8002330:	e03f      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002338:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800233c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	607a      	str	r2, [r7, #4]
  return result;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	40d3      	lsrs	r3, r2
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	220f      	movs	r2, #15
 8002360:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	fa92 f2a2 	rbit	r2, r2
 8002368:	60fa      	str	r2, [r7, #12]
  return result;
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	40d3      	lsrs	r3, r2
 8002374:	4a15      	ldr	r2, [pc, #84]	; (80023cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fbb2 f2f3 	udiv	r2, r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	e007      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fbb2 f2f3 	udiv	r2, r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	623b      	str	r3, [r7, #32]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ae:	623b      	str	r3, [r7, #32]
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	372c      	adds	r7, #44	; 0x2c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	08004888 	.word	0x08004888
 80023cc:	08004898 	.word	0x08004898

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ee:	f7ff ffef 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08004880 	.word	0x08004880

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002432:	f7ff ffcd 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002440:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	603a      	str	r2, [r7, #0]
  return result;
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	40d3      	lsrs	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_RCC_GetPCLK2Freq+0x40>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	08004880 	.word	0x08004880

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b092      	sub	sp, #72	; 0x48
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d4 	beq.w	800263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002494:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a41      	ldr	r2, [pc, #260]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe f9ff 	bl	80008d8 <HAL_GetTick>
 80024da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe f9fb 	bl	80008d8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1d6      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8084 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002518:	429a      	cmp	r2, r3
 800251a:	d07c      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	461a      	mov	r2, r3
 8002546:	2301      	movs	r3, #1
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04b      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe f9ab 	bl	80008d8 <HAL_GetTick>
 8002582:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe f9a7 	bl	80008d8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e180      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800259c:	2302      	movs	r3, #2
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
  return result;
 80025b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d108      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025ca:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	e00d      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	10908100 	.word	0x10908100
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	4b9a      	ldr	r3, [pc, #616]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2202      	movs	r2, #2
 80025ee:	613a      	str	r2, [r7, #16]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	60fa      	str	r2, [r7, #12]
  return result;
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0b7      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002616:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	498c      	ldr	r1, [pc, #560]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a87      	ldr	r2, [pc, #540]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002648:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	497f      	ldr	r1, [pc, #508]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002666:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4978      	ldr	r1, [pc, #480]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002684:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4970      	ldr	r1, [pc, #448]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a2:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f023 0210 	bic.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4969      	ldr	r1, [pc, #420]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026c0:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	4961      	ldr	r1, [pc, #388]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f023 0220 	bic.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	495a      	ldr	r1, [pc, #360]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b55      	ldr	r3, [pc, #340]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	4952      	ldr	r1, [pc, #328]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800271a:	4b4e      	ldr	r3, [pc, #312]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	494b      	ldr	r1, [pc, #300]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4943      	ldr	r1, [pc, #268]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	493c      	ldr	r1, [pc, #240]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002774:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4934      	ldr	r1, [pc, #208]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	492d      	ldr	r1, [pc, #180]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	4925      	ldr	r1, [pc, #148]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	491e      	ldr	r1, [pc, #120]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	490f      	ldr	r1, [pc, #60]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	e002      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	4913      	ldr	r1, [pc, #76]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800285c:	4313      	orrs	r3, r2
 800285e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	490b      	ldr	r1, [pc, #44]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800287a:	4313      	orrs	r3, r2
 800287c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	4904      	ldr	r1, [pc, #16]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002898:	4313      	orrs	r3, r2
 800289a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3748      	adds	r7, #72	; 0x48
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e040      	b.n	8002940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd fe48 	bl	8000564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fbbe 	bl	800306c <UART_SetConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fd88 	bl	8003418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fe0f 	bl	800355c <UART_CheckIdleState>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 8082 	bne.w	8002a66 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_Transmit+0x26>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07a      	b.n	8002a68 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_UART_Transmit+0x38>
 800297c:	2302      	movs	r3, #2
 800297e:	e073      	b.n	8002a68 <HAL_UART_Transmit+0x120>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	; 0x21
 8002994:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002996:	f7fd ff9f 	bl	80008d8 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Transmit+0x80>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029d8:	e02d      	b.n	8002a36 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fe02 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e039      	b.n	8002a68 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a06:	b292      	uxth	r2, r2
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e008      	b.n	8002a24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cb      	bne.n	80029da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fdce 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e005      	b.n	8002a68 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0ba      	sub	sp, #232	; 0xe8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 82a3 	beq.w	8003014 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
      }
      return;
 8002ad6:	e29d      	b.n	8003014 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8117 	beq.w	8002d10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002aee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002af2:	4b85      	ldr	r3, [pc, #532]	; (8002d08 <HAL_UART_IRQHandler+0x298>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 810a 	beq.w	8002d10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_UART_IRQHandler+0xbc>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_UART_IRQHandler+0xec>
 8002b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d011      	beq.n	8002b8c <HAL_UART_IRQHandler+0x11c>
 8002b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d017      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bbe:	f043 0208 	orr.w	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_UART_IRQHandler+0x18a>
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00c      	beq.n	8002bfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8209 	beq.w	8003018 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d005      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04f      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fd8f 	bl	8003776 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d141      	bne.n	8002cea <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1d9      	bne.n	8002c66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_UART_IRQHandler+0x29c>)
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd ff80 	bl	8000bcc <HAL_DMA_Abort_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d017      	beq.n	8002d02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e00f      	b.n	8002d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9ac 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00b      	b.n	8002d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9a8 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e007      	b.n	8002d02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9a4 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d00:	e18a      	b.n	8003018 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d02:	bf00      	nop
    return;
 8002d04:	e188      	b.n	8003018 <HAL_UART_IRQHandler+0x5a8>
 8002d06:	bf00      	nop
 8002d08:	04000120 	.word	0x04000120
 8002d0c:	0800383d 	.word	0x0800383d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f040 8143 	bne.w	8002fa0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 813c 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8135 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	f040 80b1 	bne.w	8002eb0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 815c 	beq.w	800301c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f080 8154 	bcs.w	800301c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	f000 8085 	beq.w	8002e94 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002db4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1da      	bne.n	8002d8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3308      	adds	r3, #8
 8002df4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002df8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e1      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3308      	adds	r3, #8
 8002e16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e3      	bne.n	8002e10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	f023 0310 	bic.w	r3, r3, #16
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e4      	bne.n	8002e54 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fe63 	bl	8000b5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8d3 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eae:	e0b5      	b.n	800301c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a7 	beq.w	8003020 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80a2 	beq.w	8003020 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002efe:	647b      	str	r3, [r7, #68]	; 0x44
 8002f00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e4      	bne.n	8002edc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	623b      	str	r3, [r7, #32]
   return(result);
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f36:	633a      	str	r2, [r7, #48]	; 0x30
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e3      	bne.n	8002f12 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f023 0310 	bic.w	r3, r3, #16
 8002f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e4      	bne.n	8002f5c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f85b 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f9e:	e03f      	b.n	8003020 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_UART_IRQHandler+0x55a>
 8002fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fc7a 	bl	80038bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fc8:	e02d      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01c      	beq.n	8003024 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    }
    return;
 8002ff2:	e017      	b.n	8003024 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <HAL_UART_IRQHandler+0x5b6>
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fc2b 	bl	8003868 <UART_EndTransmit_IT>
    return;
 8003012:	e008      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003014:	bf00      	nop
 8003016:	e006      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003018:	bf00      	nop
 800301a:	e004      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
      return;
 800301c:	bf00      	nop
 800301e:	e002      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003024:	bf00      	nop
  }

}
 8003026:	37e8      	adds	r7, #232	; 0xe8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <UART_SetConfig+0x274>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a80      	ldr	r2, [pc, #512]	; (80032e4 <UART_SetConfig+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d120      	bne.n	800312a <UART_SetConfig+0xbe>
 80030e8:	4b7f      	ldr	r3, [pc, #508]	; (80032e8 <UART_SetConfig+0x27c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d817      	bhi.n	8003124 <UART_SetConfig+0xb8>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <UART_SetConfig+0x90>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003119 	.word	0x08003119
 8003104:	0800311f 	.word	0x0800311f
 8003108:	08003113 	.word	0x08003113
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0b5      	b.n	800327e <UART_SetConfig+0x212>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0b2      	b.n	800327e <UART_SetConfig+0x212>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e0af      	b.n	800327e <UART_SetConfig+0x212>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e0ac      	b.n	800327e <UART_SetConfig+0x212>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e0a9      	b.n	800327e <UART_SetConfig+0x212>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6f      	ldr	r2, [pc, #444]	; (80032ec <UART_SetConfig+0x280>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d124      	bne.n	800317e <UART_SetConfig+0x112>
 8003134:	4b6c      	ldr	r3, [pc, #432]	; (80032e8 <UART_SetConfig+0x27c>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003140:	d011      	beq.n	8003166 <UART_SetConfig+0xfa>
 8003142:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003146:	d817      	bhi.n	8003178 <UART_SetConfig+0x10c>
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800314c:	d011      	beq.n	8003172 <UART_SetConfig+0x106>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003152:	d811      	bhi.n	8003178 <UART_SetConfig+0x10c>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <UART_SetConfig+0xf4>
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d006      	beq.n	800316c <UART_SetConfig+0x100>
 800315e:	e00b      	b.n	8003178 <UART_SetConfig+0x10c>
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e08b      	b.n	800327e <UART_SetConfig+0x212>
 8003166:	2302      	movs	r3, #2
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e088      	b.n	800327e <UART_SetConfig+0x212>
 800316c:	2304      	movs	r3, #4
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e085      	b.n	800327e <UART_SetConfig+0x212>
 8003172:	2308      	movs	r3, #8
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e082      	b.n	800327e <UART_SetConfig+0x212>
 8003178:	2310      	movs	r3, #16
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e07f      	b.n	800327e <UART_SetConfig+0x212>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5b      	ldr	r2, [pc, #364]	; (80032f0 <UART_SetConfig+0x284>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d124      	bne.n	80031d2 <UART_SetConfig+0x166>
 8003188:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <UART_SetConfig+0x27c>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003190:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003194:	d011      	beq.n	80031ba <UART_SetConfig+0x14e>
 8003196:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800319a:	d817      	bhi.n	80031cc <UART_SetConfig+0x160>
 800319c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031a0:	d011      	beq.n	80031c6 <UART_SetConfig+0x15a>
 80031a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031a6:	d811      	bhi.n	80031cc <UART_SetConfig+0x160>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <UART_SetConfig+0x148>
 80031ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b0:	d006      	beq.n	80031c0 <UART_SetConfig+0x154>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x160>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e061      	b.n	800327e <UART_SetConfig+0x212>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e05e      	b.n	800327e <UART_SetConfig+0x212>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e05b      	b.n	800327e <UART_SetConfig+0x212>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e058      	b.n	800327e <UART_SetConfig+0x212>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e055      	b.n	800327e <UART_SetConfig+0x212>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <UART_SetConfig+0x288>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d124      	bne.n	8003226 <UART_SetConfig+0x1ba>
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <UART_SetConfig+0x27c>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e8:	d011      	beq.n	800320e <UART_SetConfig+0x1a2>
 80031ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ee:	d817      	bhi.n	8003220 <UART_SetConfig+0x1b4>
 80031f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f4:	d011      	beq.n	800321a <UART_SetConfig+0x1ae>
 80031f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fa:	d811      	bhi.n	8003220 <UART_SetConfig+0x1b4>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <UART_SetConfig+0x19c>
 8003200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003204:	d006      	beq.n	8003214 <UART_SetConfig+0x1a8>
 8003206:	e00b      	b.n	8003220 <UART_SetConfig+0x1b4>
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e037      	b.n	800327e <UART_SetConfig+0x212>
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e034      	b.n	800327e <UART_SetConfig+0x212>
 8003214:	2304      	movs	r3, #4
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e031      	b.n	800327e <UART_SetConfig+0x212>
 800321a:	2308      	movs	r3, #8
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e02e      	b.n	800327e <UART_SetConfig+0x212>
 8003220:	2310      	movs	r3, #16
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e02b      	b.n	800327e <UART_SetConfig+0x212>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <UART_SetConfig+0x28c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d124      	bne.n	800327a <UART_SetConfig+0x20e>
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <UART_SetConfig+0x27c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003238:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800323c:	d011      	beq.n	8003262 <UART_SetConfig+0x1f6>
 800323e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003242:	d817      	bhi.n	8003274 <UART_SetConfig+0x208>
 8003244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003248:	d011      	beq.n	800326e <UART_SetConfig+0x202>
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d811      	bhi.n	8003274 <UART_SetConfig+0x208>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <UART_SetConfig+0x1f0>
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003258:	d006      	beq.n	8003268 <UART_SetConfig+0x1fc>
 800325a:	e00b      	b.n	8003274 <UART_SetConfig+0x208>
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e00d      	b.n	800327e <UART_SetConfig+0x212>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e00a      	b.n	800327e <UART_SetConfig+0x212>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e007      	b.n	800327e <UART_SetConfig+0x212>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e004      	b.n	800327e <UART_SetConfig+0x212>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e001      	b.n	800327e <UART_SetConfig+0x212>
 800327a:	2310      	movs	r3, #16
 800327c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	d16c      	bne.n	8003362 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d838      	bhi.n	8003300 <UART_SetConfig+0x294>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0x228>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032c9 	.word	0x080032c9
 80032a0:	08003301 	.word	0x08003301
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	08003301 	.word	0x08003301
 80032ac:	08003301 	.word	0x08003301
 80032b0:	08003301 	.word	0x08003301
 80032b4:	080032d7 	.word	0x080032d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff f896 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 80032bc:	61b8      	str	r0, [r7, #24]
        break;
 80032be:	e024      	b.n	800330a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff f8b4 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 80032c4:	61b8      	str	r0, [r7, #24]
        break;
 80032c6:	e020      	b.n	800330a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <UART_SetConfig+0x290>)
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e01d      	b.n	800330a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7ff f815 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80032d2:	61b8      	str	r0, [r7, #24]
        break;
 80032d4:	e019      	b.n	800330a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e015      	b.n	800330a <UART_SetConfig+0x29e>
 80032de:	bf00      	nop
 80032e0:	efff69f3 	.word	0xefff69f3
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40004400 	.word	0x40004400
 80032f0:	40004800 	.word	0x40004800
 80032f4:	40004c00 	.word	0x40004c00
 80032f8:	40005000 	.word	0x40005000
 80032fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	77bb      	strb	r3, [r7, #30]
        break;
 8003308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d075      	beq.n	80033fc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	005a      	lsls	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d916      	bls.n	800335c <UART_SetConfig+0x2f0>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d212      	bcs.n	800335c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	b29a      	uxth	r2, r3
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	4313      	orrs	r3, r2
 8003350:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	89fa      	ldrh	r2, [r7, #14]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e04f      	b.n	80033fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
 8003360:	e04c      	b.n	80033fc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x34e>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <UART_SetConfig+0x304>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff f828 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e013      	b.n	80033c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff f846 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 80033a0:	61b8      	str	r0, [r7, #24]
        break;
 80033a2:	e00f      	b.n	80033c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <UART_SetConfig+0x3a8>)
 80033a6:	61bb      	str	r3, [r7, #24]
        break;
 80033a8:	e00c      	b.n	80033c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7fe ffa7 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80033ae:	61b8      	str	r0, [r7, #24]
        break;
 80033b0:	e008      	b.n	80033c4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e004      	b.n	80033c4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77bb      	strb	r3, [r7, #30]
        break;
 80033c2:	bf00      	nop
    }

    if (pclk != 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085a      	lsrs	r2, r3, #1
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d908      	bls.n	80033f8 <UART_SetConfig+0x38c>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d204      	bcs.n	80033f8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e001      	b.n	80033fc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003408:	7fbb      	ldrb	r3, [r7, #30]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	007a1200 	.word	0x007a1200

08003418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01a      	beq.n	800352e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003516:	d10a      	bne.n	800352e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800356c:	f7fd f9b4 	bl	80008d8 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10e      	bne.n	800359e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f82d 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e023      	b.n	80035e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d10e      	bne.n	80035ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f817 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e00d      	b.n	80035e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b09c      	sub	sp, #112	; 0x70
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	e0a5      	b.n	800374c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	f000 80a1 	beq.w	800374c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd f965 	bl	80008d8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <UART_WaitOnFlagUntilTimeout+0x32>
 800361a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361c:	2b00      	cmp	r3, #0
 800361e:	d13e      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003634:	667b      	str	r3, [r7, #100]	; 0x64
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800363e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003640:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800364c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e6      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	663b      	str	r3, [r7, #96]	; 0x60
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003672:	64ba      	str	r2, [r7, #72]	; 0x48
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e5      	bne.n	8003652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e067      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d04f      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	d147      	bne.n	800374c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
 80036e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e6      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	613b      	str	r3, [r7, #16]
   return(result);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003718:	623a      	str	r2, [r7, #32]
 800371a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	69f9      	ldr	r1, [r7, #28]
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	61bb      	str	r3, [r7, #24]
   return(result);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e010      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	f43f af4a 	beq.w	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3770      	adds	r7, #112	; 0x70
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003776:	b480      	push	{r7}
 8003778:	b095      	sub	sp, #84	; 0x54
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
 800379e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e6      	bne.n	800377e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d118      	bne.n	800381e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	613b      	str	r3, [r7, #16]
   return(result);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003830:	bf00      	nop
 8003832:	3754      	adds	r7, #84	; 0x54
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fbf0 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	60bb      	str	r3, [r7, #8]
   return(result);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6979      	ldr	r1, [r7, #20]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	613b      	str	r3, [r7, #16]
   return(result);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fbbc 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	2000000c 	.word	0x2000000c

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4d0d      	ldr	r5, [pc, #52]	; (8003914 <__libc_init_array+0x38>)
 80038e0:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <__libc_init_array+0x3c>)
 80038e2:	1b64      	subs	r4, r4, r5
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	2600      	movs	r6, #0
 80038e8:	42a6      	cmp	r6, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	4d0b      	ldr	r5, [pc, #44]	; (800391c <__libc_init_array+0x40>)
 80038ee:	4c0c      	ldr	r4, [pc, #48]	; (8003920 <__libc_init_array+0x44>)
 80038f0:	f000 ffae 	bl	8004850 <_init>
 80038f4:	1b64      	subs	r4, r4, r5
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	2600      	movs	r6, #0
 80038fa:	42a6      	cmp	r6, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f855 3b04 	ldr.w	r3, [r5], #4
 8003904:	4798      	blx	r3
 8003906:	3601      	adds	r6, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	f855 3b04 	ldr.w	r3, [r5], #4
 800390e:	4798      	blx	r3
 8003910:	3601      	adds	r6, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	08004940 	.word	0x08004940
 8003918:	08004940 	.word	0x08004940
 800391c:	08004940 	.word	0x08004940
 8003920:	08004944 	.word	0x08004944

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <iprintf>:
 8003934:	b40f      	push	{r0, r1, r2, r3}
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <iprintf+0x2c>)
 8003938:	b513      	push	{r0, r1, r4, lr}
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	b124      	cbz	r4, 8003948 <iprintf+0x14>
 800393e:	69a3      	ldr	r3, [r4, #24]
 8003940:	b913      	cbnz	r3, 8003948 <iprintf+0x14>
 8003942:	4620      	mov	r0, r4
 8003944:	f000 f866 	bl	8003a14 <__sinit>
 8003948:	ab05      	add	r3, sp, #20
 800394a:	9a04      	ldr	r2, [sp, #16]
 800394c:	68a1      	ldr	r1, [r4, #8]
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	4620      	mov	r0, r4
 8003952:	f000 f9bd 	bl	8003cd0 <_vfiprintf_r>
 8003956:	b002      	add	sp, #8
 8003958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800395c:	b004      	add	sp, #16
 800395e:	4770      	bx	lr
 8003960:	2000000c 	.word	0x2000000c

08003964 <std>:
 8003964:	2300      	movs	r3, #0
 8003966:	b510      	push	{r4, lr}
 8003968:	4604      	mov	r4, r0
 800396a:	e9c0 3300 	strd	r3, r3, [r0]
 800396e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003972:	6083      	str	r3, [r0, #8]
 8003974:	8181      	strh	r1, [r0, #12]
 8003976:	6643      	str	r3, [r0, #100]	; 0x64
 8003978:	81c2      	strh	r2, [r0, #14]
 800397a:	6183      	str	r3, [r0, #24]
 800397c:	4619      	mov	r1, r3
 800397e:	2208      	movs	r2, #8
 8003980:	305c      	adds	r0, #92	; 0x5c
 8003982:	f7ff ffcf 	bl	8003924 <memset>
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <std+0x38>)
 8003988:	6263      	str	r3, [r4, #36]	; 0x24
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <std+0x3c>)
 800398c:	62a3      	str	r3, [r4, #40]	; 0x28
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <std+0x40>)
 8003990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <std+0x44>)
 8003994:	6224      	str	r4, [r4, #32]
 8003996:	6323      	str	r3, [r4, #48]	; 0x30
 8003998:	bd10      	pop	{r4, pc}
 800399a:	bf00      	nop
 800399c:	08004279 	.word	0x08004279
 80039a0:	0800429b 	.word	0x0800429b
 80039a4:	080042d3 	.word	0x080042d3
 80039a8:	080042f7 	.word	0x080042f7

080039ac <_cleanup_r>:
 80039ac:	4901      	ldr	r1, [pc, #4]	; (80039b4 <_cleanup_r+0x8>)
 80039ae:	f000 b8af 	b.w	8003b10 <_fwalk_reent>
 80039b2:	bf00      	nop
 80039b4:	080045d1 	.word	0x080045d1

080039b8 <__sfmoreglue>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	2268      	movs	r2, #104	; 0x68
 80039bc:	1e4d      	subs	r5, r1, #1
 80039be:	4355      	muls	r5, r2
 80039c0:	460e      	mov	r6, r1
 80039c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039c6:	f000 f8e5 	bl	8003b94 <_malloc_r>
 80039ca:	4604      	mov	r4, r0
 80039cc:	b140      	cbz	r0, 80039e0 <__sfmoreglue+0x28>
 80039ce:	2100      	movs	r1, #0
 80039d0:	e9c0 1600 	strd	r1, r6, [r0]
 80039d4:	300c      	adds	r0, #12
 80039d6:	60a0      	str	r0, [r4, #8]
 80039d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039dc:	f7ff ffa2 	bl	8003924 <memset>
 80039e0:	4620      	mov	r0, r4
 80039e2:	bd70      	pop	{r4, r5, r6, pc}

080039e4 <__sfp_lock_acquire>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__sfp_lock_acquire+0x8>)
 80039e6:	f000 b8b3 	b.w	8003b50 <__retarget_lock_acquire_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000321 	.word	0x20000321

080039f0 <__sfp_lock_release>:
 80039f0:	4801      	ldr	r0, [pc, #4]	; (80039f8 <__sfp_lock_release+0x8>)
 80039f2:	f000 b8ae 	b.w	8003b52 <__retarget_lock_release_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000321 	.word	0x20000321

080039fc <__sinit_lock_acquire>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__sinit_lock_acquire+0x8>)
 80039fe:	f000 b8a7 	b.w	8003b50 <__retarget_lock_acquire_recursive>
 8003a02:	bf00      	nop
 8003a04:	20000322 	.word	0x20000322

08003a08 <__sinit_lock_release>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__sinit_lock_release+0x8>)
 8003a0a:	f000 b8a2 	b.w	8003b52 <__retarget_lock_release_recursive>
 8003a0e:	bf00      	nop
 8003a10:	20000322 	.word	0x20000322

08003a14 <__sinit>:
 8003a14:	b510      	push	{r4, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	f7ff fff0 	bl	80039fc <__sinit_lock_acquire>
 8003a1c:	69a3      	ldr	r3, [r4, #24]
 8003a1e:	b11b      	cbz	r3, 8003a28 <__sinit+0x14>
 8003a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a24:	f7ff bff0 	b.w	8003a08 <__sinit_lock_release>
 8003a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <__sinit+0x68>)
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <__sinit+0x6c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	bf04      	itt	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	61a3      	streq	r3, [r4, #24]
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f000 f820 	bl	8003a84 <__sfp>
 8003a44:	6060      	str	r0, [r4, #4]
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 f81c 	bl	8003a84 <__sfp>
 8003a4c:	60a0      	str	r0, [r4, #8]
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f000 f818 	bl	8003a84 <__sfp>
 8003a54:	2200      	movs	r2, #0
 8003a56:	60e0      	str	r0, [r4, #12]
 8003a58:	2104      	movs	r1, #4
 8003a5a:	6860      	ldr	r0, [r4, #4]
 8003a5c:	f7ff ff82 	bl	8003964 <std>
 8003a60:	68a0      	ldr	r0, [r4, #8]
 8003a62:	2201      	movs	r2, #1
 8003a64:	2109      	movs	r1, #9
 8003a66:	f7ff ff7d 	bl	8003964 <std>
 8003a6a:	68e0      	ldr	r0, [r4, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	2112      	movs	r1, #18
 8003a70:	f7ff ff78 	bl	8003964 <std>
 8003a74:	2301      	movs	r3, #1
 8003a76:	61a3      	str	r3, [r4, #24]
 8003a78:	e7d2      	b.n	8003a20 <__sinit+0xc>
 8003a7a:	bf00      	nop
 8003a7c:	080048a8 	.word	0x080048a8
 8003a80:	080039ad 	.word	0x080039ad

08003a84 <__sfp>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	4607      	mov	r7, r0
 8003a88:	f7ff ffac 	bl	80039e4 <__sfp_lock_acquire>
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <__sfp+0x84>)
 8003a8e:	681e      	ldr	r6, [r3, #0]
 8003a90:	69b3      	ldr	r3, [r6, #24]
 8003a92:	b913      	cbnz	r3, 8003a9a <__sfp+0x16>
 8003a94:	4630      	mov	r0, r6
 8003a96:	f7ff ffbd 	bl	8003a14 <__sinit>
 8003a9a:	3648      	adds	r6, #72	; 0x48
 8003a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	d503      	bpl.n	8003aac <__sfp+0x28>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	b30b      	cbz	r3, 8003aec <__sfp+0x68>
 8003aa8:	6836      	ldr	r6, [r6, #0]
 8003aaa:	e7f7      	b.n	8003a9c <__sfp+0x18>
 8003aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ab0:	b9d5      	cbnz	r5, 8003ae8 <__sfp+0x64>
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <__sfp+0x88>)
 8003ab4:	60e3      	str	r3, [r4, #12]
 8003ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003aba:	6665      	str	r5, [r4, #100]	; 0x64
 8003abc:	f000 f847 	bl	8003b4e <__retarget_lock_init_recursive>
 8003ac0:	f7ff ff96 	bl	80039f0 <__sfp_lock_release>
 8003ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003acc:	6025      	str	r5, [r4, #0]
 8003ace:	61a5      	str	r5, [r4, #24]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ad8:	f7ff ff24 	bl	8003924 <memset>
 8003adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae8:	3468      	adds	r4, #104	; 0x68
 8003aea:	e7d9      	b.n	8003aa0 <__sfp+0x1c>
 8003aec:	2104      	movs	r1, #4
 8003aee:	4638      	mov	r0, r7
 8003af0:	f7ff ff62 	bl	80039b8 <__sfmoreglue>
 8003af4:	4604      	mov	r4, r0
 8003af6:	6030      	str	r0, [r6, #0]
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1d5      	bne.n	8003aa8 <__sfp+0x24>
 8003afc:	f7ff ff78 	bl	80039f0 <__sfp_lock_release>
 8003b00:	230c      	movs	r3, #12
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	e7ee      	b.n	8003ae4 <__sfp+0x60>
 8003b06:	bf00      	nop
 8003b08:	080048a8 	.word	0x080048a8
 8003b0c:	ffff0001 	.word	0xffff0001

08003b10 <_fwalk_reent>:
 8003b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b14:	4606      	mov	r6, r0
 8003b16:	4688      	mov	r8, r1
 8003b18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b1c:	2700      	movs	r7, #0
 8003b1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b22:	f1b9 0901 	subs.w	r9, r9, #1
 8003b26:	d505      	bpl.n	8003b34 <_fwalk_reent+0x24>
 8003b28:	6824      	ldr	r4, [r4, #0]
 8003b2a:	2c00      	cmp	r4, #0
 8003b2c:	d1f7      	bne.n	8003b1e <_fwalk_reent+0xe>
 8003b2e:	4638      	mov	r0, r7
 8003b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b34:	89ab      	ldrh	r3, [r5, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d907      	bls.n	8003b4a <_fwalk_reent+0x3a>
 8003b3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	d003      	beq.n	8003b4a <_fwalk_reent+0x3a>
 8003b42:	4629      	mov	r1, r5
 8003b44:	4630      	mov	r0, r6
 8003b46:	47c0      	blx	r8
 8003b48:	4307      	orrs	r7, r0
 8003b4a:	3568      	adds	r5, #104	; 0x68
 8003b4c:	e7e9      	b.n	8003b22 <_fwalk_reent+0x12>

08003b4e <__retarget_lock_init_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <__retarget_lock_acquire_recursive>:
 8003b50:	4770      	bx	lr

08003b52 <__retarget_lock_release_recursive>:
 8003b52:	4770      	bx	lr

08003b54 <sbrk_aligned>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4e0e      	ldr	r6, [pc, #56]	; (8003b90 <sbrk_aligned+0x3c>)
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6831      	ldr	r1, [r6, #0]
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	b911      	cbnz	r1, 8003b66 <sbrk_aligned+0x12>
 8003b60:	f000 fb7a 	bl	8004258 <_sbrk_r>
 8003b64:	6030      	str	r0, [r6, #0]
 8003b66:	4621      	mov	r1, r4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 fb75 	bl	8004258 <_sbrk_r>
 8003b6e:	1c43      	adds	r3, r0, #1
 8003b70:	d00a      	beq.n	8003b88 <sbrk_aligned+0x34>
 8003b72:	1cc4      	adds	r4, r0, #3
 8003b74:	f024 0403 	bic.w	r4, r4, #3
 8003b78:	42a0      	cmp	r0, r4
 8003b7a:	d007      	beq.n	8003b8c <sbrk_aligned+0x38>
 8003b7c:	1a21      	subs	r1, r4, r0
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f000 fb6a 	bl	8004258 <_sbrk_r>
 8003b84:	3001      	adds	r0, #1
 8003b86:	d101      	bne.n	8003b8c <sbrk_aligned+0x38>
 8003b88:	f04f 34ff 	mov.w	r4, #4294967295
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	20000328 	.word	0x20000328

08003b94 <_malloc_r>:
 8003b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b98:	1ccd      	adds	r5, r1, #3
 8003b9a:	f025 0503 	bic.w	r5, r5, #3
 8003b9e:	3508      	adds	r5, #8
 8003ba0:	2d0c      	cmp	r5, #12
 8003ba2:	bf38      	it	cc
 8003ba4:	250c      	movcc	r5, #12
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	4607      	mov	r7, r0
 8003baa:	db01      	blt.n	8003bb0 <_malloc_r+0x1c>
 8003bac:	42a9      	cmp	r1, r5
 8003bae:	d905      	bls.n	8003bbc <_malloc_r+0x28>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	4e2e      	ldr	r6, [pc, #184]	; (8003c78 <_malloc_r+0xe4>)
 8003bbe:	f000 fdbb 	bl	8004738 <__malloc_lock>
 8003bc2:	6833      	ldr	r3, [r6, #0]
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	bb34      	cbnz	r4, 8003c16 <_malloc_r+0x82>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7ff ffc2 	bl	8003b54 <sbrk_aligned>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	d14d      	bne.n	8003c72 <_malloc_r+0xde>
 8003bd6:	6834      	ldr	r4, [r6, #0]
 8003bd8:	4626      	mov	r6, r4
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	d140      	bne.n	8003c60 <_malloc_r+0xcc>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4631      	mov	r1, r6
 8003be2:	4638      	mov	r0, r7
 8003be4:	eb04 0803 	add.w	r8, r4, r3
 8003be8:	f000 fb36 	bl	8004258 <_sbrk_r>
 8003bec:	4580      	cmp	r8, r0
 8003bee:	d13a      	bne.n	8003c66 <_malloc_r+0xd2>
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	3503      	adds	r5, #3
 8003bf4:	1a6d      	subs	r5, r5, r1
 8003bf6:	f025 0503 	bic.w	r5, r5, #3
 8003bfa:	3508      	adds	r5, #8
 8003bfc:	2d0c      	cmp	r5, #12
 8003bfe:	bf38      	it	cc
 8003c00:	250c      	movcc	r5, #12
 8003c02:	4629      	mov	r1, r5
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7ff ffa5 	bl	8003b54 <sbrk_aligned>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d02b      	beq.n	8003c66 <_malloc_r+0xd2>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	442b      	add	r3, r5
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	e00e      	b.n	8003c34 <_malloc_r+0xa0>
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	1b52      	subs	r2, r2, r5
 8003c1a:	d41e      	bmi.n	8003c5a <_malloc_r+0xc6>
 8003c1c:	2a0b      	cmp	r2, #11
 8003c1e:	d916      	bls.n	8003c4e <_malloc_r+0xba>
 8003c20:	1961      	adds	r1, r4, r5
 8003c22:	42a3      	cmp	r3, r4
 8003c24:	6025      	str	r5, [r4, #0]
 8003c26:	bf18      	it	ne
 8003c28:	6059      	strne	r1, [r3, #4]
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	bf08      	it	eq
 8003c2e:	6031      	streq	r1, [r6, #0]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4638      	mov	r0, r7
 8003c36:	f104 060b 	add.w	r6, r4, #11
 8003c3a:	f000 fd83 	bl	8004744 <__malloc_unlock>
 8003c3e:	f026 0607 	bic.w	r6, r6, #7
 8003c42:	1d23      	adds	r3, r4, #4
 8003c44:	1af2      	subs	r2, r6, r3
 8003c46:	d0b6      	beq.n	8003bb6 <_malloc_r+0x22>
 8003c48:	1b9b      	subs	r3, r3, r6
 8003c4a:	50a3      	str	r3, [r4, r2]
 8003c4c:	e7b3      	b.n	8003bb6 <_malloc_r+0x22>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	bf0c      	ite	eq
 8003c54:	6032      	streq	r2, [r6, #0]
 8003c56:	605a      	strne	r2, [r3, #4]
 8003c58:	e7ec      	b.n	8003c34 <_malloc_r+0xa0>
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	6864      	ldr	r4, [r4, #4]
 8003c5e:	e7b2      	b.n	8003bc6 <_malloc_r+0x32>
 8003c60:	4634      	mov	r4, r6
 8003c62:	6876      	ldr	r6, [r6, #4]
 8003c64:	e7b9      	b.n	8003bda <_malloc_r+0x46>
 8003c66:	230c      	movs	r3, #12
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f000 fd6a 	bl	8004744 <__malloc_unlock>
 8003c70:	e7a1      	b.n	8003bb6 <_malloc_r+0x22>
 8003c72:	6025      	str	r5, [r4, #0]
 8003c74:	e7de      	b.n	8003c34 <_malloc_r+0xa0>
 8003c76:	bf00      	nop
 8003c78:	20000324 	.word	0x20000324

08003c7c <__sfputc_r>:
 8003c7c:	6893      	ldr	r3, [r2, #8]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	b410      	push	{r4}
 8003c84:	6093      	str	r3, [r2, #8]
 8003c86:	da08      	bge.n	8003c9a <__sfputc_r+0x1e>
 8003c88:	6994      	ldr	r4, [r2, #24]
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	db01      	blt.n	8003c92 <__sfputc_r+0x16>
 8003c8e:	290a      	cmp	r1, #10
 8003c90:	d103      	bne.n	8003c9a <__sfputc_r+0x1e>
 8003c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c96:	f000 bb33 	b.w	8004300 <__swbuf_r>
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	1c58      	adds	r0, r3, #1
 8003c9e:	6010      	str	r0, [r2, #0]
 8003ca0:	7019      	strb	r1, [r3, #0]
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <__sfputs_r>:
 8003caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cac:	4606      	mov	r6, r0
 8003cae:	460f      	mov	r7, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	18d5      	adds	r5, r2, r3
 8003cb4:	42ac      	cmp	r4, r5
 8003cb6:	d101      	bne.n	8003cbc <__sfputs_r+0x12>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e007      	b.n	8003ccc <__sfputs_r+0x22>
 8003cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc0:	463a      	mov	r2, r7
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f7ff ffda 	bl	8003c7c <__sfputc_r>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d1f3      	bne.n	8003cb4 <__sfputs_r+0xa>
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cd0 <_vfiprintf_r>:
 8003cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd4:	460d      	mov	r5, r1
 8003cd6:	b09d      	sub	sp, #116	; 0x74
 8003cd8:	4614      	mov	r4, r2
 8003cda:	4698      	mov	r8, r3
 8003cdc:	4606      	mov	r6, r0
 8003cde:	b118      	cbz	r0, 8003ce8 <_vfiprintf_r+0x18>
 8003ce0:	6983      	ldr	r3, [r0, #24]
 8003ce2:	b90b      	cbnz	r3, 8003ce8 <_vfiprintf_r+0x18>
 8003ce4:	f7ff fe96 	bl	8003a14 <__sinit>
 8003ce8:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <_vfiprintf_r+0x240>)
 8003cea:	429d      	cmp	r5, r3
 8003cec:	d11b      	bne.n	8003d26 <_vfiprintf_r+0x56>
 8003cee:	6875      	ldr	r5, [r6, #4]
 8003cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cf2:	07d9      	lsls	r1, r3, #31
 8003cf4:	d405      	bmi.n	8003d02 <_vfiprintf_r+0x32>
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	059a      	lsls	r2, r3, #22
 8003cfa:	d402      	bmi.n	8003d02 <_vfiprintf_r+0x32>
 8003cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cfe:	f7ff ff27 	bl	8003b50 <__retarget_lock_acquire_recursive>
 8003d02:	89ab      	ldrh	r3, [r5, #12]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	d501      	bpl.n	8003d0c <_vfiprintf_r+0x3c>
 8003d08:	692b      	ldr	r3, [r5, #16]
 8003d0a:	b9eb      	cbnz	r3, 8003d48 <_vfiprintf_r+0x78>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f000 fb5a 	bl	80043c8 <__swsetup_r>
 8003d14:	b1c0      	cbz	r0, 8003d48 <_vfiprintf_r+0x78>
 8003d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d18:	07dc      	lsls	r4, r3, #31
 8003d1a:	d50e      	bpl.n	8003d3a <_vfiprintf_r+0x6a>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	b01d      	add	sp, #116	; 0x74
 8003d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d26:	4b7b      	ldr	r3, [pc, #492]	; (8003f14 <_vfiprintf_r+0x244>)
 8003d28:	429d      	cmp	r5, r3
 8003d2a:	d101      	bne.n	8003d30 <_vfiprintf_r+0x60>
 8003d2c:	68b5      	ldr	r5, [r6, #8]
 8003d2e:	e7df      	b.n	8003cf0 <_vfiprintf_r+0x20>
 8003d30:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <_vfiprintf_r+0x248>)
 8003d32:	429d      	cmp	r5, r3
 8003d34:	bf08      	it	eq
 8003d36:	68f5      	ldreq	r5, [r6, #12]
 8003d38:	e7da      	b.n	8003cf0 <_vfiprintf_r+0x20>
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	0598      	lsls	r0, r3, #22
 8003d3e:	d4ed      	bmi.n	8003d1c <_vfiprintf_r+0x4c>
 8003d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d42:	f7ff ff06 	bl	8003b52 <__retarget_lock_release_recursive>
 8003d46:	e7e9      	b.n	8003d1c <_vfiprintf_r+0x4c>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d56:	2330      	movs	r3, #48	; 0x30
 8003d58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f1c <_vfiprintf_r+0x24c>
 8003d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d60:	f04f 0901 	mov.w	r9, #1
 8003d64:	4623      	mov	r3, r4
 8003d66:	469a      	mov	sl, r3
 8003d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d6c:	b10a      	cbz	r2, 8003d72 <_vfiprintf_r+0xa2>
 8003d6e:	2a25      	cmp	r2, #37	; 0x25
 8003d70:	d1f9      	bne.n	8003d66 <_vfiprintf_r+0x96>
 8003d72:	ebba 0b04 	subs.w	fp, sl, r4
 8003d76:	d00b      	beq.n	8003d90 <_vfiprintf_r+0xc0>
 8003d78:	465b      	mov	r3, fp
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7ff ff93 	bl	8003caa <__sfputs_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	f000 80aa 	beq.w	8003ede <_vfiprintf_r+0x20e>
 8003d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d8c:	445a      	add	r2, fp
 8003d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a2 	beq.w	8003ede <_vfiprintf_r+0x20e>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003da4:	f10a 0a01 	add.w	sl, sl, #1
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	9307      	str	r3, [sp, #28]
 8003dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003db0:	931a      	str	r3, [sp, #104]	; 0x68
 8003db2:	4654      	mov	r4, sl
 8003db4:	2205      	movs	r2, #5
 8003db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dba:	4858      	ldr	r0, [pc, #352]	; (8003f1c <_vfiprintf_r+0x24c>)
 8003dbc:	f7fc fa10 	bl	80001e0 <memchr>
 8003dc0:	9a04      	ldr	r2, [sp, #16]
 8003dc2:	b9d8      	cbnz	r0, 8003dfc <_vfiprintf_r+0x12c>
 8003dc4:	06d1      	lsls	r1, r2, #27
 8003dc6:	bf44      	itt	mi
 8003dc8:	2320      	movmi	r3, #32
 8003dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dce:	0713      	lsls	r3, r2, #28
 8003dd0:	bf44      	itt	mi
 8003dd2:	232b      	movmi	r3, #43	; 0x2b
 8003dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dde:	d015      	beq.n	8003e0c <_vfiprintf_r+0x13c>
 8003de0:	9a07      	ldr	r2, [sp, #28]
 8003de2:	4654      	mov	r4, sl
 8003de4:	2000      	movs	r0, #0
 8003de6:	f04f 0c0a 	mov.w	ip, #10
 8003dea:	4621      	mov	r1, r4
 8003dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df0:	3b30      	subs	r3, #48	; 0x30
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d94e      	bls.n	8003e94 <_vfiprintf_r+0x1c4>
 8003df6:	b1b0      	cbz	r0, 8003e26 <_vfiprintf_r+0x156>
 8003df8:	9207      	str	r2, [sp, #28]
 8003dfa:	e014      	b.n	8003e26 <_vfiprintf_r+0x156>
 8003dfc:	eba0 0308 	sub.w	r3, r0, r8
 8003e00:	fa09 f303 	lsl.w	r3, r9, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	9304      	str	r3, [sp, #16]
 8003e08:	46a2      	mov	sl, r4
 8003e0a:	e7d2      	b.n	8003db2 <_vfiprintf_r+0xe2>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1d19      	adds	r1, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9103      	str	r1, [sp, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bfbb      	ittet	lt
 8003e18:	425b      	neglt	r3, r3
 8003e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e1e:	9307      	strge	r3, [sp, #28]
 8003e20:	9307      	strlt	r3, [sp, #28]
 8003e22:	bfb8      	it	lt
 8003e24:	9204      	strlt	r2, [sp, #16]
 8003e26:	7823      	ldrb	r3, [r4, #0]
 8003e28:	2b2e      	cmp	r3, #46	; 0x2e
 8003e2a:	d10c      	bne.n	8003e46 <_vfiprintf_r+0x176>
 8003e2c:	7863      	ldrb	r3, [r4, #1]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d135      	bne.n	8003e9e <_vfiprintf_r+0x1ce>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	9203      	str	r2, [sp, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bfb8      	it	lt
 8003e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e42:	3402      	adds	r4, #2
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f2c <_vfiprintf_r+0x25c>
 8003e4a:	7821      	ldrb	r1, [r4, #0]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4650      	mov	r0, sl
 8003e50:	f7fc f9c6 	bl	80001e0 <memchr>
 8003e54:	b140      	cbz	r0, 8003e68 <_vfiprintf_r+0x198>
 8003e56:	2340      	movs	r3, #64	; 0x40
 8003e58:	eba0 000a 	sub.w	r0, r0, sl
 8003e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e60:	9b04      	ldr	r3, [sp, #16]
 8003e62:	4303      	orrs	r3, r0
 8003e64:	3401      	adds	r4, #1
 8003e66:	9304      	str	r3, [sp, #16]
 8003e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e6c:	482c      	ldr	r0, [pc, #176]	; (8003f20 <_vfiprintf_r+0x250>)
 8003e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e72:	2206      	movs	r2, #6
 8003e74:	f7fc f9b4 	bl	80001e0 <memchr>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d03f      	beq.n	8003efc <_vfiprintf_r+0x22c>
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <_vfiprintf_r+0x254>)
 8003e7e:	bb1b      	cbnz	r3, 8003ec8 <_vfiprintf_r+0x1f8>
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	3307      	adds	r3, #7
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	3308      	adds	r3, #8
 8003e8a:	9303      	str	r3, [sp, #12]
 8003e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e8e:	443b      	add	r3, r7
 8003e90:	9309      	str	r3, [sp, #36]	; 0x24
 8003e92:	e767      	b.n	8003d64 <_vfiprintf_r+0x94>
 8003e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e98:	460c      	mov	r4, r1
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	e7a5      	b.n	8003dea <_vfiprintf_r+0x11a>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f04f 0c0a 	mov.w	ip, #10
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb0:	3a30      	subs	r2, #48	; 0x30
 8003eb2:	2a09      	cmp	r2, #9
 8003eb4:	d903      	bls.n	8003ebe <_vfiprintf_r+0x1ee>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0c5      	beq.n	8003e46 <_vfiprintf_r+0x176>
 8003eba:	9105      	str	r1, [sp, #20]
 8003ebc:	e7c3      	b.n	8003e46 <_vfiprintf_r+0x176>
 8003ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e7f0      	b.n	8003eaa <_vfiprintf_r+0x1da>
 8003ec8:	ab03      	add	r3, sp, #12
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <_vfiprintf_r+0x258>)
 8003ed0:	a904      	add	r1, sp, #16
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	4607      	mov	r7, r0
 8003eda:	1c78      	adds	r0, r7, #1
 8003edc:	d1d6      	bne.n	8003e8c <_vfiprintf_r+0x1bc>
 8003ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee0:	07d9      	lsls	r1, r3, #31
 8003ee2:	d405      	bmi.n	8003ef0 <_vfiprintf_r+0x220>
 8003ee4:	89ab      	ldrh	r3, [r5, #12]
 8003ee6:	059a      	lsls	r2, r3, #22
 8003ee8:	d402      	bmi.n	8003ef0 <_vfiprintf_r+0x220>
 8003eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eec:	f7ff fe31 	bl	8003b52 <__retarget_lock_release_recursive>
 8003ef0:	89ab      	ldrh	r3, [r5, #12]
 8003ef2:	065b      	lsls	r3, r3, #25
 8003ef4:	f53f af12 	bmi.w	8003d1c <_vfiprintf_r+0x4c>
 8003ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efa:	e711      	b.n	8003d20 <_vfiprintf_r+0x50>
 8003efc:	ab03      	add	r3, sp, #12
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	462a      	mov	r2, r5
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <_vfiprintf_r+0x258>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f880 	bl	800400c <_printf_i>
 8003f0c:	e7e4      	b.n	8003ed8 <_vfiprintf_r+0x208>
 8003f0e:	bf00      	nop
 8003f10:	080048cc 	.word	0x080048cc
 8003f14:	080048ec 	.word	0x080048ec
 8003f18:	080048ac 	.word	0x080048ac
 8003f1c:	0800490c 	.word	0x0800490c
 8003f20:	08004916 	.word	0x08004916
 8003f24:	00000000 	.word	0x00000000
 8003f28:	08003cab 	.word	0x08003cab
 8003f2c:	08004912 	.word	0x08004912

08003f30 <_printf_common>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	4616      	mov	r6, r2
 8003f36:	4699      	mov	r9, r3
 8003f38:	688a      	ldr	r2, [r1, #8]
 8003f3a:	690b      	ldr	r3, [r1, #16]
 8003f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bfb8      	it	lt
 8003f44:	4613      	movlt	r3, r2
 8003f46:	6033      	str	r3, [r6, #0]
 8003f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	b10a      	cbz	r2, 8003f56 <_printf_common+0x26>
 8003f52:	3301      	adds	r3, #1
 8003f54:	6033      	str	r3, [r6, #0]
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	0699      	lsls	r1, r3, #26
 8003f5a:	bf42      	ittt	mi
 8003f5c:	6833      	ldrmi	r3, [r6, #0]
 8003f5e:	3302      	addmi	r3, #2
 8003f60:	6033      	strmi	r3, [r6, #0]
 8003f62:	6825      	ldr	r5, [r4, #0]
 8003f64:	f015 0506 	ands.w	r5, r5, #6
 8003f68:	d106      	bne.n	8003f78 <_printf_common+0x48>
 8003f6a:	f104 0a19 	add.w	sl, r4, #25
 8003f6e:	68e3      	ldr	r3, [r4, #12]
 8003f70:	6832      	ldr	r2, [r6, #0]
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	42ab      	cmp	r3, r5
 8003f76:	dc26      	bgt.n	8003fc6 <_printf_common+0x96>
 8003f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f7c:	1e13      	subs	r3, r2, #0
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	bf18      	it	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	0692      	lsls	r2, r2, #26
 8003f86:	d42b      	bmi.n	8003fe0 <_printf_common+0xb0>
 8003f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	4638      	mov	r0, r7
 8003f90:	47c0      	blx	r8
 8003f92:	3001      	adds	r0, #1
 8003f94:	d01e      	beq.n	8003fd4 <_printf_common+0xa4>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	68e5      	ldr	r5, [r4, #12]
 8003f9a:	6832      	ldr	r2, [r6, #0]
 8003f9c:	f003 0306 	and.w	r3, r3, #6
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	bf08      	it	eq
 8003fa4:	1aad      	subeq	r5, r5, r2
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	6922      	ldr	r2, [r4, #16]
 8003faa:	bf0c      	ite	eq
 8003fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fb0:	2500      	movne	r5, #0
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	bfc4      	itt	gt
 8003fb6:	1a9b      	subgt	r3, r3, r2
 8003fb8:	18ed      	addgt	r5, r5, r3
 8003fba:	2600      	movs	r6, #0
 8003fbc:	341a      	adds	r4, #26
 8003fbe:	42b5      	cmp	r5, r6
 8003fc0:	d11a      	bne.n	8003ff8 <_printf_common+0xc8>
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	e008      	b.n	8003fd8 <_printf_common+0xa8>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4652      	mov	r2, sl
 8003fca:	4649      	mov	r1, r9
 8003fcc:	4638      	mov	r0, r7
 8003fce:	47c0      	blx	r8
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d103      	bne.n	8003fdc <_printf_common+0xac>
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fdc:	3501      	adds	r5, #1
 8003fde:	e7c6      	b.n	8003f6e <_printf_common+0x3e>
 8003fe0:	18e1      	adds	r1, r4, r3
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	2030      	movs	r0, #48	; 0x30
 8003fe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fea:	4422      	add	r2, r4
 8003fec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	e7c7      	b.n	8003f88 <_printf_common+0x58>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	4638      	mov	r0, r7
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d0e6      	beq.n	8003fd4 <_printf_common+0xa4>
 8004006:	3601      	adds	r6, #1
 8004008:	e7d9      	b.n	8003fbe <_printf_common+0x8e>
	...

0800400c <_printf_i>:
 800400c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	7e0f      	ldrb	r7, [r1, #24]
 8004012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004014:	2f78      	cmp	r7, #120	; 0x78
 8004016:	4691      	mov	r9, r2
 8004018:	4680      	mov	r8, r0
 800401a:	460c      	mov	r4, r1
 800401c:	469a      	mov	sl, r3
 800401e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004022:	d807      	bhi.n	8004034 <_printf_i+0x28>
 8004024:	2f62      	cmp	r7, #98	; 0x62
 8004026:	d80a      	bhi.n	800403e <_printf_i+0x32>
 8004028:	2f00      	cmp	r7, #0
 800402a:	f000 80d8 	beq.w	80041de <_printf_i+0x1d2>
 800402e:	2f58      	cmp	r7, #88	; 0x58
 8004030:	f000 80a3 	beq.w	800417a <_printf_i+0x16e>
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800403c:	e03a      	b.n	80040b4 <_printf_i+0xa8>
 800403e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004042:	2b15      	cmp	r3, #21
 8004044:	d8f6      	bhi.n	8004034 <_printf_i+0x28>
 8004046:	a101      	add	r1, pc, #4	; (adr r1, 800404c <_printf_i+0x40>)
 8004048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800404c:	080040a5 	.word	0x080040a5
 8004050:	080040b9 	.word	0x080040b9
 8004054:	08004035 	.word	0x08004035
 8004058:	08004035 	.word	0x08004035
 800405c:	08004035 	.word	0x08004035
 8004060:	08004035 	.word	0x08004035
 8004064:	080040b9 	.word	0x080040b9
 8004068:	08004035 	.word	0x08004035
 800406c:	08004035 	.word	0x08004035
 8004070:	08004035 	.word	0x08004035
 8004074:	08004035 	.word	0x08004035
 8004078:	080041c5 	.word	0x080041c5
 800407c:	080040e9 	.word	0x080040e9
 8004080:	080041a7 	.word	0x080041a7
 8004084:	08004035 	.word	0x08004035
 8004088:	08004035 	.word	0x08004035
 800408c:	080041e7 	.word	0x080041e7
 8004090:	08004035 	.word	0x08004035
 8004094:	080040e9 	.word	0x080040e9
 8004098:	08004035 	.word	0x08004035
 800409c:	08004035 	.word	0x08004035
 80040a0:	080041af 	.word	0x080041af
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	1d1a      	adds	r2, r3, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	602a      	str	r2, [r5, #0]
 80040ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0a3      	b.n	8004200 <_printf_i+0x1f4>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	6829      	ldr	r1, [r5, #0]
 80040bc:	0606      	lsls	r6, r0, #24
 80040be:	f101 0304 	add.w	r3, r1, #4
 80040c2:	d50a      	bpl.n	80040da <_printf_i+0xce>
 80040c4:	680e      	ldr	r6, [r1, #0]
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	2e00      	cmp	r6, #0
 80040ca:	da03      	bge.n	80040d4 <_printf_i+0xc8>
 80040cc:	232d      	movs	r3, #45	; 0x2d
 80040ce:	4276      	negs	r6, r6
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d4:	485e      	ldr	r0, [pc, #376]	; (8004250 <_printf_i+0x244>)
 80040d6:	230a      	movs	r3, #10
 80040d8:	e019      	b.n	800410e <_printf_i+0x102>
 80040da:	680e      	ldr	r6, [r1, #0]
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040e2:	bf18      	it	ne
 80040e4:	b236      	sxthne	r6, r6
 80040e6:	e7ef      	b.n	80040c8 <_printf_i+0xbc>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	1d19      	adds	r1, r3, #4
 80040ee:	6029      	str	r1, [r5, #0]
 80040f0:	0601      	lsls	r1, r0, #24
 80040f2:	d501      	bpl.n	80040f8 <_printf_i+0xec>
 80040f4:	681e      	ldr	r6, [r3, #0]
 80040f6:	e002      	b.n	80040fe <_printf_i+0xf2>
 80040f8:	0646      	lsls	r6, r0, #25
 80040fa:	d5fb      	bpl.n	80040f4 <_printf_i+0xe8>
 80040fc:	881e      	ldrh	r6, [r3, #0]
 80040fe:	4854      	ldr	r0, [pc, #336]	; (8004250 <_printf_i+0x244>)
 8004100:	2f6f      	cmp	r7, #111	; 0x6f
 8004102:	bf0c      	ite	eq
 8004104:	2308      	moveq	r3, #8
 8004106:	230a      	movne	r3, #10
 8004108:	2100      	movs	r1, #0
 800410a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800410e:	6865      	ldr	r5, [r4, #4]
 8004110:	60a5      	str	r5, [r4, #8]
 8004112:	2d00      	cmp	r5, #0
 8004114:	bfa2      	ittt	ge
 8004116:	6821      	ldrge	r1, [r4, #0]
 8004118:	f021 0104 	bicge.w	r1, r1, #4
 800411c:	6021      	strge	r1, [r4, #0]
 800411e:	b90e      	cbnz	r6, 8004124 <_printf_i+0x118>
 8004120:	2d00      	cmp	r5, #0
 8004122:	d04d      	beq.n	80041c0 <_printf_i+0x1b4>
 8004124:	4615      	mov	r5, r2
 8004126:	fbb6 f1f3 	udiv	r1, r6, r3
 800412a:	fb03 6711 	mls	r7, r3, r1, r6
 800412e:	5dc7      	ldrb	r7, [r0, r7]
 8004130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004134:	4637      	mov	r7, r6
 8004136:	42bb      	cmp	r3, r7
 8004138:	460e      	mov	r6, r1
 800413a:	d9f4      	bls.n	8004126 <_printf_i+0x11a>
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10b      	bne.n	8004158 <_printf_i+0x14c>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	07de      	lsls	r6, r3, #31
 8004144:	d508      	bpl.n	8004158 <_printf_i+0x14c>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	6861      	ldr	r1, [r4, #4]
 800414a:	4299      	cmp	r1, r3
 800414c:	bfde      	ittt	le
 800414e:	2330      	movle	r3, #48	; 0x30
 8004150:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004154:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004158:	1b52      	subs	r2, r2, r5
 800415a:	6122      	str	r2, [r4, #16]
 800415c:	f8cd a000 	str.w	sl, [sp]
 8004160:	464b      	mov	r3, r9
 8004162:	aa03      	add	r2, sp, #12
 8004164:	4621      	mov	r1, r4
 8004166:	4640      	mov	r0, r8
 8004168:	f7ff fee2 	bl	8003f30 <_printf_common>
 800416c:	3001      	adds	r0, #1
 800416e:	d14c      	bne.n	800420a <_printf_i+0x1fe>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	b004      	add	sp, #16
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417a:	4835      	ldr	r0, [pc, #212]	; (8004250 <_printf_i+0x244>)
 800417c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004180:	6829      	ldr	r1, [r5, #0]
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f851 6b04 	ldr.w	r6, [r1], #4
 8004188:	6029      	str	r1, [r5, #0]
 800418a:	061d      	lsls	r5, r3, #24
 800418c:	d514      	bpl.n	80041b8 <_printf_i+0x1ac>
 800418e:	07df      	lsls	r7, r3, #31
 8004190:	bf44      	itt	mi
 8004192:	f043 0320 	orrmi.w	r3, r3, #32
 8004196:	6023      	strmi	r3, [r4, #0]
 8004198:	b91e      	cbnz	r6, 80041a2 <_printf_i+0x196>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	f023 0320 	bic.w	r3, r3, #32
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	2310      	movs	r3, #16
 80041a4:	e7b0      	b.n	8004108 <_printf_i+0xfc>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	f043 0320 	orr.w	r3, r3, #32
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	2378      	movs	r3, #120	; 0x78
 80041b0:	4828      	ldr	r0, [pc, #160]	; (8004254 <_printf_i+0x248>)
 80041b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041b6:	e7e3      	b.n	8004180 <_printf_i+0x174>
 80041b8:	0659      	lsls	r1, r3, #25
 80041ba:	bf48      	it	mi
 80041bc:	b2b6      	uxthmi	r6, r6
 80041be:	e7e6      	b.n	800418e <_printf_i+0x182>
 80041c0:	4615      	mov	r5, r2
 80041c2:	e7bb      	b.n	800413c <_printf_i+0x130>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	6826      	ldr	r6, [r4, #0]
 80041c8:	6961      	ldr	r1, [r4, #20]
 80041ca:	1d18      	adds	r0, r3, #4
 80041cc:	6028      	str	r0, [r5, #0]
 80041ce:	0635      	lsls	r5, r6, #24
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0x1cc>
 80041d4:	6019      	str	r1, [r3, #0]
 80041d6:	e002      	b.n	80041de <_printf_i+0x1d2>
 80041d8:	0670      	lsls	r0, r6, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0x1c8>
 80041dc:	8019      	strh	r1, [r3, #0]
 80041de:	2300      	movs	r3, #0
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	4615      	mov	r5, r2
 80041e4:	e7ba      	b.n	800415c <_printf_i+0x150>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	602a      	str	r2, [r5, #0]
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	6862      	ldr	r2, [r4, #4]
 80041f0:	2100      	movs	r1, #0
 80041f2:	4628      	mov	r0, r5
 80041f4:	f7fb fff4 	bl	80001e0 <memchr>
 80041f8:	b108      	cbz	r0, 80041fe <_printf_i+0x1f2>
 80041fa:	1b40      	subs	r0, r0, r5
 80041fc:	6060      	str	r0, [r4, #4]
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	2300      	movs	r3, #0
 8004204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004208:	e7a8      	b.n	800415c <_printf_i+0x150>
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	462a      	mov	r2, r5
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	47d0      	blx	sl
 8004214:	3001      	adds	r0, #1
 8004216:	d0ab      	beq.n	8004170 <_printf_i+0x164>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	079b      	lsls	r3, r3, #30
 800421c:	d413      	bmi.n	8004246 <_printf_i+0x23a>
 800421e:	68e0      	ldr	r0, [r4, #12]
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	4298      	cmp	r0, r3
 8004224:	bfb8      	it	lt
 8004226:	4618      	movlt	r0, r3
 8004228:	e7a4      	b.n	8004174 <_printf_i+0x168>
 800422a:	2301      	movs	r3, #1
 800422c:	4632      	mov	r2, r6
 800422e:	4649      	mov	r1, r9
 8004230:	4640      	mov	r0, r8
 8004232:	47d0      	blx	sl
 8004234:	3001      	adds	r0, #1
 8004236:	d09b      	beq.n	8004170 <_printf_i+0x164>
 8004238:	3501      	adds	r5, #1
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	9903      	ldr	r1, [sp, #12]
 800423e:	1a5b      	subs	r3, r3, r1
 8004240:	42ab      	cmp	r3, r5
 8004242:	dcf2      	bgt.n	800422a <_printf_i+0x21e>
 8004244:	e7eb      	b.n	800421e <_printf_i+0x212>
 8004246:	2500      	movs	r5, #0
 8004248:	f104 0619 	add.w	r6, r4, #25
 800424c:	e7f5      	b.n	800423a <_printf_i+0x22e>
 800424e:	bf00      	nop
 8004250:	0800491d 	.word	0x0800491d
 8004254:	0800492e 	.word	0x0800492e

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d06      	ldr	r5, [pc, #24]	; (8004274 <_sbrk_r+0x1c>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fc fa6c 	bl	8000740 <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	2000032c 	.word	0x2000032c

08004278 <__sread>:
 8004278:	b510      	push	{r4, lr}
 800427a:	460c      	mov	r4, r1
 800427c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004280:	f000 fab2 	bl	80047e8 <_read_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	bfab      	itete	ge
 8004288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800428a:	89a3      	ldrhlt	r3, [r4, #12]
 800428c:	181b      	addge	r3, r3, r0
 800428e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004292:	bfac      	ite	ge
 8004294:	6563      	strge	r3, [r4, #84]	; 0x54
 8004296:	81a3      	strhlt	r3, [r4, #12]
 8004298:	bd10      	pop	{r4, pc}

0800429a <__swrite>:
 800429a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429e:	461f      	mov	r7, r3
 80042a0:	898b      	ldrh	r3, [r1, #12]
 80042a2:	05db      	lsls	r3, r3, #23
 80042a4:	4605      	mov	r5, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	4616      	mov	r6, r2
 80042aa:	d505      	bpl.n	80042b8 <__swrite+0x1e>
 80042ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b0:	2302      	movs	r3, #2
 80042b2:	2200      	movs	r2, #0
 80042b4:	f000 f9c8 	bl	8004648 <_lseek_r>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	4632      	mov	r2, r6
 80042c6:	463b      	mov	r3, r7
 80042c8:	4628      	mov	r0, r5
 80042ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ce:	f000 b869 	b.w	80043a4 <_write_r>

080042d2 <__sseek>:
 80042d2:	b510      	push	{r4, lr}
 80042d4:	460c      	mov	r4, r1
 80042d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042da:	f000 f9b5 	bl	8004648 <_lseek_r>
 80042de:	1c43      	adds	r3, r0, #1
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	bf15      	itete	ne
 80042e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80042e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ee:	81a3      	strheq	r3, [r4, #12]
 80042f0:	bf18      	it	ne
 80042f2:	81a3      	strhne	r3, [r4, #12]
 80042f4:	bd10      	pop	{r4, pc}

080042f6 <__sclose>:
 80042f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042fa:	f000 b8d3 	b.w	80044a4 <_close_r>
	...

08004300 <__swbuf_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	460e      	mov	r6, r1
 8004304:	4614      	mov	r4, r2
 8004306:	4605      	mov	r5, r0
 8004308:	b118      	cbz	r0, 8004312 <__swbuf_r+0x12>
 800430a:	6983      	ldr	r3, [r0, #24]
 800430c:	b90b      	cbnz	r3, 8004312 <__swbuf_r+0x12>
 800430e:	f7ff fb81 	bl	8003a14 <__sinit>
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <__swbuf_r+0x98>)
 8004314:	429c      	cmp	r4, r3
 8004316:	d12b      	bne.n	8004370 <__swbuf_r+0x70>
 8004318:	686c      	ldr	r4, [r5, #4]
 800431a:	69a3      	ldr	r3, [r4, #24]
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	071a      	lsls	r2, r3, #28
 8004322:	d52f      	bpl.n	8004384 <__swbuf_r+0x84>
 8004324:	6923      	ldr	r3, [r4, #16]
 8004326:	b36b      	cbz	r3, 8004384 <__swbuf_r+0x84>
 8004328:	6923      	ldr	r3, [r4, #16]
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	1ac0      	subs	r0, r0, r3
 800432e:	6963      	ldr	r3, [r4, #20]
 8004330:	b2f6      	uxtb	r6, r6
 8004332:	4283      	cmp	r3, r0
 8004334:	4637      	mov	r7, r6
 8004336:	dc04      	bgt.n	8004342 <__swbuf_r+0x42>
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	f000 f948 	bl	80045d0 <_fflush_r>
 8004340:	bb30      	cbnz	r0, 8004390 <__swbuf_r+0x90>
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	3b01      	subs	r3, #1
 8004346:	60a3      	str	r3, [r4, #8]
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	701e      	strb	r6, [r3, #0]
 8004350:	6963      	ldr	r3, [r4, #20]
 8004352:	3001      	adds	r0, #1
 8004354:	4283      	cmp	r3, r0
 8004356:	d004      	beq.n	8004362 <__swbuf_r+0x62>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	07db      	lsls	r3, r3, #31
 800435c:	d506      	bpl.n	800436c <__swbuf_r+0x6c>
 800435e:	2e0a      	cmp	r6, #10
 8004360:	d104      	bne.n	800436c <__swbuf_r+0x6c>
 8004362:	4621      	mov	r1, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f000 f933 	bl	80045d0 <_fflush_r>
 800436a:	b988      	cbnz	r0, 8004390 <__swbuf_r+0x90>
 800436c:	4638      	mov	r0, r7
 800436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <__swbuf_r+0x9c>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d101      	bne.n	800437a <__swbuf_r+0x7a>
 8004376:	68ac      	ldr	r4, [r5, #8]
 8004378:	e7cf      	b.n	800431a <__swbuf_r+0x1a>
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <__swbuf_r+0xa0>)
 800437c:	429c      	cmp	r4, r3
 800437e:	bf08      	it	eq
 8004380:	68ec      	ldreq	r4, [r5, #12]
 8004382:	e7ca      	b.n	800431a <__swbuf_r+0x1a>
 8004384:	4621      	mov	r1, r4
 8004386:	4628      	mov	r0, r5
 8004388:	f000 f81e 	bl	80043c8 <__swsetup_r>
 800438c:	2800      	cmp	r0, #0
 800438e:	d0cb      	beq.n	8004328 <__swbuf_r+0x28>
 8004390:	f04f 37ff 	mov.w	r7, #4294967295
 8004394:	e7ea      	b.n	800436c <__swbuf_r+0x6c>
 8004396:	bf00      	nop
 8004398:	080048cc 	.word	0x080048cc
 800439c:	080048ec 	.word	0x080048ec
 80043a0:	080048ac 	.word	0x080048ac

080043a4 <_write_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d07      	ldr	r5, [pc, #28]	; (80043c4 <_write_r+0x20>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc f973 	bl	800069e <_write>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_write_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_write_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	2000032c 	.word	0x2000032c

080043c8 <__swsetup_r>:
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <__swsetup_r+0xcc>)
 80043ca:	b570      	push	{r4, r5, r6, lr}
 80043cc:	681d      	ldr	r5, [r3, #0]
 80043ce:	4606      	mov	r6, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	b125      	cbz	r5, 80043de <__swsetup_r+0x16>
 80043d4:	69ab      	ldr	r3, [r5, #24]
 80043d6:	b913      	cbnz	r3, 80043de <__swsetup_r+0x16>
 80043d8:	4628      	mov	r0, r5
 80043da:	f7ff fb1b 	bl	8003a14 <__sinit>
 80043de:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <__swsetup_r+0xd0>)
 80043e0:	429c      	cmp	r4, r3
 80043e2:	d10f      	bne.n	8004404 <__swsetup_r+0x3c>
 80043e4:	686c      	ldr	r4, [r5, #4]
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043ec:	0719      	lsls	r1, r3, #28
 80043ee:	d42c      	bmi.n	800444a <__swsetup_r+0x82>
 80043f0:	06dd      	lsls	r5, r3, #27
 80043f2:	d411      	bmi.n	8004418 <__swsetup_r+0x50>
 80043f4:	2309      	movs	r3, #9
 80043f6:	6033      	str	r3, [r6, #0]
 80043f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	e03e      	b.n	8004482 <__swsetup_r+0xba>
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <__swsetup_r+0xd4>)
 8004406:	429c      	cmp	r4, r3
 8004408:	d101      	bne.n	800440e <__swsetup_r+0x46>
 800440a:	68ac      	ldr	r4, [r5, #8]
 800440c:	e7eb      	b.n	80043e6 <__swsetup_r+0x1e>
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <__swsetup_r+0xd8>)
 8004410:	429c      	cmp	r4, r3
 8004412:	bf08      	it	eq
 8004414:	68ec      	ldreq	r4, [r5, #12]
 8004416:	e7e6      	b.n	80043e6 <__swsetup_r+0x1e>
 8004418:	0758      	lsls	r0, r3, #29
 800441a:	d512      	bpl.n	8004442 <__swsetup_r+0x7a>
 800441c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441e:	b141      	cbz	r1, 8004432 <__swsetup_r+0x6a>
 8004420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004424:	4299      	cmp	r1, r3
 8004426:	d002      	beq.n	800442e <__swsetup_r+0x66>
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f991 	bl	8004750 <_free_r>
 800442e:	2300      	movs	r3, #0
 8004430:	6363      	str	r3, [r4, #52]	; 0x34
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	2300      	movs	r3, #0
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	81a3      	strh	r3, [r4, #12]
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	b94b      	cbnz	r3, 8004462 <__swsetup_r+0x9a>
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004458:	d003      	beq.n	8004462 <__swsetup_r+0x9a>
 800445a:	4621      	mov	r1, r4
 800445c:	4630      	mov	r0, r6
 800445e:	f000 f92b 	bl	80046b8 <__smakebuf_r>
 8004462:	89a0      	ldrh	r0, [r4, #12]
 8004464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004468:	f010 0301 	ands.w	r3, r0, #1
 800446c:	d00a      	beq.n	8004484 <__swsetup_r+0xbc>
 800446e:	2300      	movs	r3, #0
 8004470:	60a3      	str	r3, [r4, #8]
 8004472:	6963      	ldr	r3, [r4, #20]
 8004474:	425b      	negs	r3, r3
 8004476:	61a3      	str	r3, [r4, #24]
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	b943      	cbnz	r3, 800448e <__swsetup_r+0xc6>
 800447c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004480:	d1ba      	bne.n	80043f8 <__swsetup_r+0x30>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	0781      	lsls	r1, r0, #30
 8004486:	bf58      	it	pl
 8004488:	6963      	ldrpl	r3, [r4, #20]
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	e7f4      	b.n	8004478 <__swsetup_r+0xb0>
 800448e:	2000      	movs	r0, #0
 8004490:	e7f7      	b.n	8004482 <__swsetup_r+0xba>
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c
 8004498:	080048cc 	.word	0x080048cc
 800449c:	080048ec 	.word	0x080048ec
 80044a0:	080048ac 	.word	0x080048ac

080044a4 <_close_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d06      	ldr	r5, [pc, #24]	; (80044c0 <_close_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc f911 	bl	80006d6 <_close>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_close_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_close_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	2000032c 	.word	0x2000032c

080044c4 <__sflush_r>:
 80044c4:	898a      	ldrh	r2, [r1, #12]
 80044c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	4605      	mov	r5, r0
 80044cc:	0710      	lsls	r0, r2, #28
 80044ce:	460c      	mov	r4, r1
 80044d0:	d458      	bmi.n	8004584 <__sflush_r+0xc0>
 80044d2:	684b      	ldr	r3, [r1, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dc05      	bgt.n	80044e4 <__sflush_r+0x20>
 80044d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dc02      	bgt.n	80044e4 <__sflush_r+0x20>
 80044de:	2000      	movs	r0, #0
 80044e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	d0f9      	beq.n	80044de <__sflush_r+0x1a>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044f0:	682f      	ldr	r7, [r5, #0]
 80044f2:	602b      	str	r3, [r5, #0]
 80044f4:	d032      	beq.n	800455c <__sflush_r+0x98>
 80044f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	075a      	lsls	r2, r3, #29
 80044fc:	d505      	bpl.n	800450a <__sflush_r+0x46>
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004504:	b10b      	cbz	r3, 800450a <__sflush_r+0x46>
 8004506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004508:	1ac0      	subs	r0, r0, r3
 800450a:	2300      	movs	r3, #0
 800450c:	4602      	mov	r2, r0
 800450e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	4628      	mov	r0, r5
 8004514:	47b0      	blx	r6
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	d106      	bne.n	800452a <__sflush_r+0x66>
 800451c:	6829      	ldr	r1, [r5, #0]
 800451e:	291d      	cmp	r1, #29
 8004520:	d82c      	bhi.n	800457c <__sflush_r+0xb8>
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <__sflush_r+0x108>)
 8004524:	40ca      	lsrs	r2, r1
 8004526:	07d6      	lsls	r6, r2, #31
 8004528:	d528      	bpl.n	800457c <__sflush_r+0xb8>
 800452a:	2200      	movs	r2, #0
 800452c:	6062      	str	r2, [r4, #4]
 800452e:	04d9      	lsls	r1, r3, #19
 8004530:	6922      	ldr	r2, [r4, #16]
 8004532:	6022      	str	r2, [r4, #0]
 8004534:	d504      	bpl.n	8004540 <__sflush_r+0x7c>
 8004536:	1c42      	adds	r2, r0, #1
 8004538:	d101      	bne.n	800453e <__sflush_r+0x7a>
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	b903      	cbnz	r3, 8004540 <__sflush_r+0x7c>
 800453e:	6560      	str	r0, [r4, #84]	; 0x54
 8004540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004542:	602f      	str	r7, [r5, #0]
 8004544:	2900      	cmp	r1, #0
 8004546:	d0ca      	beq.n	80044de <__sflush_r+0x1a>
 8004548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800454c:	4299      	cmp	r1, r3
 800454e:	d002      	beq.n	8004556 <__sflush_r+0x92>
 8004550:	4628      	mov	r0, r5
 8004552:	f000 f8fd 	bl	8004750 <_free_r>
 8004556:	2000      	movs	r0, #0
 8004558:	6360      	str	r0, [r4, #52]	; 0x34
 800455a:	e7c1      	b.n	80044e0 <__sflush_r+0x1c>
 800455c:	6a21      	ldr	r1, [r4, #32]
 800455e:	2301      	movs	r3, #1
 8004560:	4628      	mov	r0, r5
 8004562:	47b0      	blx	r6
 8004564:	1c41      	adds	r1, r0, #1
 8004566:	d1c7      	bne.n	80044f8 <__sflush_r+0x34>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0c4      	beq.n	80044f8 <__sflush_r+0x34>
 800456e:	2b1d      	cmp	r3, #29
 8004570:	d001      	beq.n	8004576 <__sflush_r+0xb2>
 8004572:	2b16      	cmp	r3, #22
 8004574:	d101      	bne.n	800457a <__sflush_r+0xb6>
 8004576:	602f      	str	r7, [r5, #0]
 8004578:	e7b1      	b.n	80044de <__sflush_r+0x1a>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	e7ad      	b.n	80044e0 <__sflush_r+0x1c>
 8004584:	690f      	ldr	r7, [r1, #16]
 8004586:	2f00      	cmp	r7, #0
 8004588:	d0a9      	beq.n	80044de <__sflush_r+0x1a>
 800458a:	0793      	lsls	r3, r2, #30
 800458c:	680e      	ldr	r6, [r1, #0]
 800458e:	bf08      	it	eq
 8004590:	694b      	ldreq	r3, [r1, #20]
 8004592:	600f      	str	r7, [r1, #0]
 8004594:	bf18      	it	ne
 8004596:	2300      	movne	r3, #0
 8004598:	eba6 0807 	sub.w	r8, r6, r7
 800459c:	608b      	str	r3, [r1, #8]
 800459e:	f1b8 0f00 	cmp.w	r8, #0
 80045a2:	dd9c      	ble.n	80044de <__sflush_r+0x1a>
 80045a4:	6a21      	ldr	r1, [r4, #32]
 80045a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045a8:	4643      	mov	r3, r8
 80045aa:	463a      	mov	r2, r7
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b0      	blx	r6
 80045b0:	2800      	cmp	r0, #0
 80045b2:	dc06      	bgt.n	80045c2 <__sflush_r+0xfe>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e78e      	b.n	80044e0 <__sflush_r+0x1c>
 80045c2:	4407      	add	r7, r0
 80045c4:	eba8 0800 	sub.w	r8, r8, r0
 80045c8:	e7e9      	b.n	800459e <__sflush_r+0xda>
 80045ca:	bf00      	nop
 80045cc:	20400001 	.word	0x20400001

080045d0 <_fflush_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	690b      	ldr	r3, [r1, #16]
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b913      	cbnz	r3, 80045e0 <_fflush_r+0x10>
 80045da:	2500      	movs	r5, #0
 80045dc:	4628      	mov	r0, r5
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	b118      	cbz	r0, 80045ea <_fflush_r+0x1a>
 80045e2:	6983      	ldr	r3, [r0, #24]
 80045e4:	b90b      	cbnz	r3, 80045ea <_fflush_r+0x1a>
 80045e6:	f7ff fa15 	bl	8003a14 <__sinit>
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <_fflush_r+0x6c>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	d11b      	bne.n	8004628 <_fflush_r+0x58>
 80045f0:	686c      	ldr	r4, [r5, #4]
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ef      	beq.n	80045da <_fflush_r+0xa>
 80045fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045fc:	07d0      	lsls	r0, r2, #31
 80045fe:	d404      	bmi.n	800460a <_fflush_r+0x3a>
 8004600:	0599      	lsls	r1, r3, #22
 8004602:	d402      	bmi.n	800460a <_fflush_r+0x3a>
 8004604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004606:	f7ff faa3 	bl	8003b50 <__retarget_lock_acquire_recursive>
 800460a:	4628      	mov	r0, r5
 800460c:	4621      	mov	r1, r4
 800460e:	f7ff ff59 	bl	80044c4 <__sflush_r>
 8004612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004614:	07da      	lsls	r2, r3, #31
 8004616:	4605      	mov	r5, r0
 8004618:	d4e0      	bmi.n	80045dc <_fflush_r+0xc>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d4dd      	bmi.n	80045dc <_fflush_r+0xc>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f7ff fa96 	bl	8003b52 <__retarget_lock_release_recursive>
 8004626:	e7d9      	b.n	80045dc <_fflush_r+0xc>
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <_fflush_r+0x70>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d101      	bne.n	8004632 <_fflush_r+0x62>
 800462e:	68ac      	ldr	r4, [r5, #8]
 8004630:	e7df      	b.n	80045f2 <_fflush_r+0x22>
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <_fflush_r+0x74>)
 8004634:	429c      	cmp	r4, r3
 8004636:	bf08      	it	eq
 8004638:	68ec      	ldreq	r4, [r5, #12]
 800463a:	e7da      	b.n	80045f2 <_fflush_r+0x22>
 800463c:	080048cc 	.word	0x080048cc
 8004640:	080048ec 	.word	0x080048ec
 8004644:	080048ac 	.word	0x080048ac

08004648 <_lseek_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d07      	ldr	r5, [pc, #28]	; (8004668 <_lseek_r+0x20>)
 800464c:	4604      	mov	r4, r0
 800464e:	4608      	mov	r0, r1
 8004650:	4611      	mov	r1, r2
 8004652:	2200      	movs	r2, #0
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fc f864 	bl	8000724 <_lseek>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_lseek_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_lseek_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	2000032c 	.word	0x2000032c

0800466c <__swhatbuf_r>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	460e      	mov	r6, r1
 8004670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004674:	2900      	cmp	r1, #0
 8004676:	b096      	sub	sp, #88	; 0x58
 8004678:	4614      	mov	r4, r2
 800467a:	461d      	mov	r5, r3
 800467c:	da08      	bge.n	8004690 <__swhatbuf_r+0x24>
 800467e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	602a      	str	r2, [r5, #0]
 8004686:	061a      	lsls	r2, r3, #24
 8004688:	d410      	bmi.n	80046ac <__swhatbuf_r+0x40>
 800468a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800468e:	e00e      	b.n	80046ae <__swhatbuf_r+0x42>
 8004690:	466a      	mov	r2, sp
 8004692:	f000 f8bb 	bl	800480c <_fstat_r>
 8004696:	2800      	cmp	r0, #0
 8004698:	dbf1      	blt.n	800467e <__swhatbuf_r+0x12>
 800469a:	9a01      	ldr	r2, [sp, #4]
 800469c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046a4:	425a      	negs	r2, r3
 80046a6:	415a      	adcs	r2, r3
 80046a8:	602a      	str	r2, [r5, #0]
 80046aa:	e7ee      	b.n	800468a <__swhatbuf_r+0x1e>
 80046ac:	2340      	movs	r3, #64	; 0x40
 80046ae:	2000      	movs	r0, #0
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	b016      	add	sp, #88	; 0x58
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046b8 <__smakebuf_r>:
 80046b8:	898b      	ldrh	r3, [r1, #12]
 80046ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046bc:	079d      	lsls	r5, r3, #30
 80046be:	4606      	mov	r6, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	d507      	bpl.n	80046d4 <__smakebuf_r+0x1c>
 80046c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	6123      	str	r3, [r4, #16]
 80046cc:	2301      	movs	r3, #1
 80046ce:	6163      	str	r3, [r4, #20]
 80046d0:	b002      	add	sp, #8
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	ab01      	add	r3, sp, #4
 80046d6:	466a      	mov	r2, sp
 80046d8:	f7ff ffc8 	bl	800466c <__swhatbuf_r>
 80046dc:	9900      	ldr	r1, [sp, #0]
 80046de:	4605      	mov	r5, r0
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff fa57 	bl	8003b94 <_malloc_r>
 80046e6:	b948      	cbnz	r0, 80046fc <__smakebuf_r+0x44>
 80046e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ec:	059a      	lsls	r2, r3, #22
 80046ee:	d4ef      	bmi.n	80046d0 <__smakebuf_r+0x18>
 80046f0:	f023 0303 	bic.w	r3, r3, #3
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	e7e3      	b.n	80046c4 <__smakebuf_r+0xc>
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <__smakebuf_r+0x7c>)
 80046fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	6020      	str	r0, [r4, #0]
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	9b00      	ldr	r3, [sp, #0]
 800470c:	6163      	str	r3, [r4, #20]
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	6120      	str	r0, [r4, #16]
 8004712:	b15b      	cbz	r3, 800472c <__smakebuf_r+0x74>
 8004714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004718:	4630      	mov	r0, r6
 800471a:	f000 f889 	bl	8004830 <_isatty_r>
 800471e:	b128      	cbz	r0, 800472c <__smakebuf_r+0x74>
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	89a0      	ldrh	r0, [r4, #12]
 800472e:	4305      	orrs	r5, r0
 8004730:	81a5      	strh	r5, [r4, #12]
 8004732:	e7cd      	b.n	80046d0 <__smakebuf_r+0x18>
 8004734:	080039ad 	.word	0x080039ad

08004738 <__malloc_lock>:
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <__malloc_lock+0x8>)
 800473a:	f7ff ba09 	b.w	8003b50 <__retarget_lock_acquire_recursive>
 800473e:	bf00      	nop
 8004740:	20000320 	.word	0x20000320

08004744 <__malloc_unlock>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__malloc_unlock+0x8>)
 8004746:	f7ff ba04 	b.w	8003b52 <__retarget_lock_release_recursive>
 800474a:	bf00      	nop
 800474c:	20000320 	.word	0x20000320

08004750 <_free_r>:
 8004750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004752:	2900      	cmp	r1, #0
 8004754:	d044      	beq.n	80047e0 <_free_r+0x90>
 8004756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475a:	9001      	str	r0, [sp, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f1a1 0404 	sub.w	r4, r1, #4
 8004762:	bfb8      	it	lt
 8004764:	18e4      	addlt	r4, r4, r3
 8004766:	f7ff ffe7 	bl	8004738 <__malloc_lock>
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <_free_r+0x94>)
 800476c:	9801      	ldr	r0, [sp, #4]
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	b933      	cbnz	r3, 8004780 <_free_r+0x30>
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	6014      	str	r4, [r2, #0]
 8004776:	b003      	add	sp, #12
 8004778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800477c:	f7ff bfe2 	b.w	8004744 <__malloc_unlock>
 8004780:	42a3      	cmp	r3, r4
 8004782:	d908      	bls.n	8004796 <_free_r+0x46>
 8004784:	6825      	ldr	r5, [r4, #0]
 8004786:	1961      	adds	r1, r4, r5
 8004788:	428b      	cmp	r3, r1
 800478a:	bf01      	itttt	eq
 800478c:	6819      	ldreq	r1, [r3, #0]
 800478e:	685b      	ldreq	r3, [r3, #4]
 8004790:	1949      	addeq	r1, r1, r5
 8004792:	6021      	streq	r1, [r4, #0]
 8004794:	e7ed      	b.n	8004772 <_free_r+0x22>
 8004796:	461a      	mov	r2, r3
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b10b      	cbz	r3, 80047a0 <_free_r+0x50>
 800479c:	42a3      	cmp	r3, r4
 800479e:	d9fa      	bls.n	8004796 <_free_r+0x46>
 80047a0:	6811      	ldr	r1, [r2, #0]
 80047a2:	1855      	adds	r5, r2, r1
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d10b      	bne.n	80047c0 <_free_r+0x70>
 80047a8:	6824      	ldr	r4, [r4, #0]
 80047aa:	4421      	add	r1, r4
 80047ac:	1854      	adds	r4, r2, r1
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	d1e0      	bne.n	8004776 <_free_r+0x26>
 80047b4:	681c      	ldr	r4, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	6053      	str	r3, [r2, #4]
 80047ba:	4421      	add	r1, r4
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	e7da      	b.n	8004776 <_free_r+0x26>
 80047c0:	d902      	bls.n	80047c8 <_free_r+0x78>
 80047c2:	230c      	movs	r3, #12
 80047c4:	6003      	str	r3, [r0, #0]
 80047c6:	e7d6      	b.n	8004776 <_free_r+0x26>
 80047c8:	6825      	ldr	r5, [r4, #0]
 80047ca:	1961      	adds	r1, r4, r5
 80047cc:	428b      	cmp	r3, r1
 80047ce:	bf04      	itt	eq
 80047d0:	6819      	ldreq	r1, [r3, #0]
 80047d2:	685b      	ldreq	r3, [r3, #4]
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	bf04      	itt	eq
 80047d8:	1949      	addeq	r1, r1, r5
 80047da:	6021      	streq	r1, [r4, #0]
 80047dc:	6054      	str	r4, [r2, #4]
 80047de:	e7ca      	b.n	8004776 <_free_r+0x26>
 80047e0:	b003      	add	sp, #12
 80047e2:	bd30      	pop	{r4, r5, pc}
 80047e4:	20000324 	.word	0x20000324

080047e8 <_read_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_read_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fb ff34 	bl	8000664 <_read>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_read_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_read_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	2000032c 	.word	0x2000032c

0800480c <_fstat_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d07      	ldr	r5, [pc, #28]	; (800482c <_fstat_r+0x20>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	f7fb ff68 	bl	80006ee <_fstat>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	d102      	bne.n	8004828 <_fstat_r+0x1c>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	b103      	cbz	r3, 8004828 <_fstat_r+0x1c>
 8004826:	6023      	str	r3, [r4, #0]
 8004828:	bd38      	pop	{r3, r4, r5, pc}
 800482a:	bf00      	nop
 800482c:	2000032c 	.word	0x2000032c

08004830 <_isatty_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d06      	ldr	r5, [pc, #24]	; (800484c <_isatty_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fb ff67 	bl	800070e <_isatty>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_isatty_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_isatty_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	2000032c 	.word	0x2000032c

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
